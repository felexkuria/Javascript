<%- include('partials/header', { title: 'Admin Panel' }) %>

<main class="max-w-6xl mx-auto px-4 py-6">
  <div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 shadow-sm rounded-lg p-6">
    <h1 class="text-2xl font-bold text-gray-900 dark:text-white mb-6">Admin Panel</h1>
    
    <!-- YouTube Playlist Import -->
    <div class="mb-8 p-4 border border-gray-200 dark:border-gray-600 rounded-lg">
      <h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">üì∫ Import YouTube Playlist</h2>
      <div class="flex gap-4">
        <input type="text" id="playlistId" placeholder="YouTube Playlist ID" 
               class="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded">
        <input type="text" id="courseName" placeholder="Course Name" 
               class="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded">
        <button id="importPlaylist" class="px-6 py-2 bg-red-500 hover:bg-red-600 text-white rounded">
          Import Playlist
        </button>
      </div>
      <div id="importStatus" class="mt-2 text-sm hidden"></div>
    </div>

    <!-- Practice Exam Generator -->
    <div class="mb-8 p-4 border border-gray-200 dark:border-gray-600 rounded-lg">
      <h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">üìù Generate Practice Exam</h2>
      <div class="flex gap-4">
        <select id="examCourse" class="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded">
          <option value="">Select Course</option>
        </select>
        <button id="generateExam" class="px-6 py-2 bg-purple-500 hover:bg-purple-600 text-white rounded">
          Generate 65 Questions
        </button>
      </div>
      <div id="examStatus" class="mt-2 text-sm hidden"></div>
    </div>

    <!-- Large Video Transcription -->
    <div class="mb-8 p-4 border border-gray-200 dark:border-gray-600 rounded-lg">
      <h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">üé¨ AWS Transcribe (Large Videos)</h2>
      <div class="flex gap-4">
        <input type="file" id="largeVideo" accept="video/*" 
               class="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white rounded">
        <button id="transcribeVideo" class="px-6 py-2 bg-orange-500 hover:bg-orange-600 text-white rounded">
          Transcribe with AWS
        </button>
      </div>
      <div id="transcribeStatus" class="mt-2 text-sm hidden"></div>
    </div>

    <!-- DynamoDB Migration -->
    <div class="p-4 border border-gray-200 dark:border-gray-600 rounded-lg">
      <h2 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">üóÑÔ∏è DynamoDB Migration</h2>
      <div class="flex gap-4">
        <button id="migrateToDynamo" class="px-6 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded">
          Migrate to DynamoDB
        </button>
        <button id="syncDynamo" class="px-6 py-2 bg-green-500 hover:bg-green-600 text-white rounded">
          Sync Data
        </button>
      </div>
      <div id="migrationStatus" class="mt-2 text-sm hidden"></div>
    </div>
  </div>
</main>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Load courses for exam generation
  fetch('/api/videos/localStorage')
    .then(response => response.json())
    .then(data => {
      const select = document.getElementById('examCourse');
      Object.keys(data).forEach(course => {
        const option = document.createElement('option');
        option.value = course;
        option.textContent = course;
        select.appendChild(option);
      });
    });

  // YouTube playlist import
  document.getElementById('importPlaylist').addEventListener('click', async function() {
    const playlistId = document.getElementById('playlistId').value.trim();
    const courseName = document.getElementById('courseName').value.trim();
    const status = document.getElementById('importStatus');
    
    if (!playlistId || !courseName) {
      status.className = 'mt-2 text-sm text-red-500';
      status.textContent = 'Please enter both playlist ID and course name';
      status.classList.remove('hidden');
      return;
    }
    
    this.disabled = true;
    this.textContent = 'Importing...';
    status.className = 'mt-2 text-sm text-blue-500';
    status.textContent = 'Importing YouTube playlist...';
    status.classList.remove('hidden');
    
    try {
      const response = await fetch('/api/youtube/playlist', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ playlistId, courseName })
      });
      
      const data = await response.json();
      if (data.success) {
        status.className = 'mt-2 text-sm text-green-500';
        status.textContent = `Successfully imported ${data.videos.length} videos from "${data.playlist.title}"`;
      } else {
        throw new Error(data.error || 'Import failed');
      }
    } catch (error) {
      status.className = 'mt-2 text-sm text-red-500';
      status.textContent = `Import failed: ${error.message}`;
    } finally {
      this.disabled = false;
      this.textContent = 'Import Playlist';
    }
  });

  // Practice exam generation
  document.getElementById('generateExam').addEventListener('click', async function() {
    const courseName = document.getElementById('examCourse').value;
    const status = document.getElementById('examStatus');
    
    if (!courseName) {
      status.className = 'mt-2 text-sm text-red-500';
      status.textContent = 'Please select a course';
      status.classList.remove('hidden');
      return;
    }
    
    this.disabled = true;
    this.textContent = 'Generating...';
    status.className = 'mt-2 text-sm text-blue-500';
    status.textContent = 'Generating 65 ExamTopics-style questions...';
    status.classList.remove('hidden');
    
    try {
      const response = await fetch('/api/practice-exam/generate', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ courseName })
      });
      
      const data = await response.json();
      if (data.questions) {
        status.className = 'mt-2 text-sm text-green-500';
        status.textContent = `Generated ${data.totalQuestions} practice questions for ${courseName}`;
        
        // Download questions as JSON
        const blob = new Blob([JSON.stringify(data.questions, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${courseName}-practice-exam.json`;
        a.click();
        URL.revokeObjectURL(url);
      } else {
        throw new Error(data.error || 'Generation failed');
      }
    } catch (error) {
      status.className = 'mt-2 text-sm text-red-500';
      status.textContent = `Generation failed: ${error.message}`;
    } finally {
      this.disabled = false;
      this.textContent = 'Generate 65 Questions';
    }
  });

  // Large video transcription
  document.getElementById('transcribeVideo').addEventListener('click', async function() {
    const fileInput = document.getElementById('largeVideo');
    const status = document.getElementById('transcribeStatus');
    
    if (!fileInput.files[0]) {
      status.className = 'mt-2 text-sm text-red-500';
      status.textContent = 'Please select a video file';
      status.classList.remove('hidden');
      return;
    }
    
    const file = fileInput.files[0];
    const fileSizeMB = file.size / (1024 * 1024);
    
    if (fileSizeMB < 100) {
      status.className = 'mt-2 text-sm text-yellow-500';
      status.textContent = 'File is small enough for local processing. Use regular SRT generation instead.';
      status.classList.remove('hidden');
      return;
    }
    
    this.disabled = true;
    this.textContent = 'Transcribing...';
    status.className = 'mt-2 text-sm text-blue-500';
    status.textContent = `Uploading ${fileSizeMB.toFixed(1)}MB video to AWS Transcribe...`;
    status.classList.remove('hidden');
    
    try {
      const formData = new FormData();
      formData.append('video', file);
      formData.append('videoTitle', file.name.replace(/\.[^/.]+$/, ''));
      
      const response = await fetch('/api/transcribe/large-video', {
        method: 'POST',
        body: formData
      });
      
      const data = await response.json();
      if (data.success) {
        status.className = 'mt-2 text-sm text-green-500';
        status.textContent = `Transcription completed! SRT file saved to: ${data.srtPath}`;
      } else {
        throw new Error(data.error || 'Transcription failed');
      }
    } catch (error) {
      status.className = 'mt-2 text-sm text-red-500';
      status.textContent = `Transcription failed: ${error.message}`;
    } finally {
      this.disabled = false;
      this.textContent = 'Transcribe with AWS';
    }
  });
});
</script>

<%- include('partials/footer') %>