<%- include('partials/header', { title: `${video ? video.title : 'Video'} -
${courseName}`, extraStyles: `
<link rel="stylesheet" href="/css/gamification.css">
<link rel="stylesheet" href="/css/quiz-system.css">
<style>
  .video-container {
    position: relative;
    padding-bottom: 56.25%; /* 16:9 aspect ratio */
    height: 0;
    overflow: hidden;
  }
  .video-container video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
  .watched-badge {
    display: inline-flex;
    align-items: center;
    padding: 0.25rem 0.5rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 500;
    margin-left: 0.5rem;
  }
  .watched-badge.watched {
    background-color: rgba(16, 185, 129, 0.1);
    color: rgb(16, 185, 129);
  }
  .watched-badge.unwatched {
    background-color: rgba(239, 68, 68, 0.1);
    color: rgb(239, 68, 68);
  }
  .key-hint {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 1rem;
    border-radius: 0.5rem;
    font-size: 1.5rem;
    font-weight: bold;
    z-index: 50;
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  .key-hint.visible {
    opacity: 1;
  }
  
  body {
    background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
    min-height: 100vh;
    color: #f8fafc;
  }
  .glass-card {
    background: rgba(255, 255, 255, 0.98);
    backdrop-filter: blur(20px);
    border: 2px solid rgba(255, 255, 255, 0.3);
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.4);
  }
  .glass-sidebar {
    background: rgba(15, 23, 42, 0.9);
    backdrop-filter: blur(15px);
    border: 2px solid rgba(148, 163, 184, 0.3);
    color: #f1f5f9;
  }
  
  /* Chatbot Styles */
  #chatContainer {
    background: rgba(248, 250, 252, 0.9);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(203, 213, 224, 0.5);
  }
  
  #chatContainer::-webkit-scrollbar {
    width: 6px;
  }
  
  #chatContainer::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 3px;
  }
  
  #chatContainer::-webkit-scrollbar-thumb {
    background: #cbd5e0;
    border-radius: 3px;
  }
  
  #chatContainer::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
  }
  
  .chat-message {
    animation: fadeInUp 0.3s ease-out;
  }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .typing-indicator {
    animation: pulse 1.5s infinite;
  }
  
  @keyframes pulse {
    0%, 100% { opacity: 0.7; }
    50% { opacity: 1; }
  }
  
  /* Todo List Styles */
  .todo-item {
    transition: all 0.2s ease;
  }
  
  .todo-item:hover {
    transform: translateX(2px);
  }
  
  .todo-item input[type="checkbox"]:checked + label {
    opacity: 0.6;
  }
  
  .todo-item input[type="checkbox"]:checked + label .todo-text {
    text-decoration: line-through;
  }
  
  .priority-high {
    border-left: 3px solid #ef4444;
  }
  
  .priority-medium {
    border-left: 3px solid #f59e0b;
  }
  
  .priority-low {
    border-left: 3px solid #10b981;
  }
  
  .todo-progress {
    background: linear-gradient(90deg, #10b981 0%, #059669 100%);
  }
</style>
` }) %>

<!-- Main Content -->
<main class="flex-grow overflow-y-auto px-4 py-8 md:px-8">
  <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
    <div class="lg:col-span-3">
      <div
        class="glass-card rounded-2xl overflow-hidden"
      >
        <div class="p-6">
          <div class="mb-4">
            <div class="flex items-center justify-between">
              <div class="flex items-center">
                <h1 class="text-3xl font-bold text-gray-900 leading-tight">
                  <%= video ? (video.title) : 'Video Not Found' %>
                </h1>
                <% if (video && video.watched) { %>
                <span class="watched-badge watched">
                  <i class="fas fa-check mr-1"></i> Watched
                </span>
                <% } else { %>
                <span class="watched-badge unwatched">
                  <i class="fas fa-times mr-1"></i> Unwatched
                </span>
                <% } %>
              </div>
              <button
                id="forceSyncButton"
                class="text-xs px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
              >
                <i class="fas fa-sync-alt mr-1"></i> Force Sync
              </button>
            </div>
            <p class="text-gray-700 text-lg mt-3 leading-relaxed">
              <%= video ? video.description : 'No description available' %>
            </p>
          </div>

          <div class="video-content-container">
            <% if (video && video !== null && video !== undefined) { %>
            <div class="video-container mb-4">
              <video id="videoPlayer" controls class="w-full">
                <source
                  src="/videos/<%= courseName %>/file/<%= video._id %>"
                  type="video/mp4"
                />
                <% if (video.captionsUrl) { %>
                <track
                  label="English"
                  kind="subtitles"
                  srclang="en"
                  src="/captions/<%= courseName %>/<%= video._id %>"
                  default
                />
                <% } %>

                Your browser does not support the video tag.
              </video>
            </div>
            <% if (video.captionsUrl) { %>
            <div class="flex items-center mt-2 mb-4">
              <i class="fas fa-closed-captioning text-gray-500 mr-2"></i>
              <span class="text-sm text-gray-600">Captions available</span>
            </div>
            <% } %> <% if (video.thumbnailUrl) { %>
            <div class="mt-2 mb-4">
              <!-- <img src="<%= video.thumbnailUrl %>" alt="Video thumbnail" class="w-full max-w-md mx-auto rounded shadow"> -->
            </div>
            <% } %> <% if (!video.videoUrl) { %>
            <div
              class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-4"
            >
              <p class="font-bold">Video File May Not Be Available</p>
              <p>
                This video might be available in offline mode. If the video
                doesn't play, try reconnecting to the internet.
              </p>
            </div>
            <% } %>

            <div class="flex justify-between items-center mb-4">
              <div class="flex space-x-2">
                <% if (!isFirstVideo) { %>
                <button
                  id="prevButton"
                  class="px-3 py-1 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
                >
                  <i class="fas fa-step-backward mr-1"></i> Previous
                </button>
                <% } %> <% if (!isLastVideo) { %>
                <button
                  id="nextButton"
                  class="px-3 py-1 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
                >
                  Next <i class="fas fa-step-forward ml-1"></i>
                </button>
                <% } %>
              </div>

              <div class="flex items-center">
                <span class="text-sm text-gray-600 dark:text-gray-400 mr-2">
                  <%= watchedVideos %>/<%= totalVideos %> videos (<%=
                  watchedPercent %>%)
                </span>
                <div
                  class="w-32 h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden"
                >
                  <div
                    class="h-full bg-green-500"
                    style="width: <%= watchedPercent %>%"
                  ></div>
                </div>
              </div>
            </div>

            <!-- Video Summary Section -->
            <div id="videoSummary" class="bg-gray-50 rounded-lg p-4 mb-4" style="display: none;">
              <h3 class="text-lg font-semibold text-gray-800 mb-3">üìù Video Summary</h3>
              <p id="summaryText" class="text-gray-600 mb-4"></p>
              <h4 class="font-medium text-gray-800 mb-2">üîë Key Topics</h4>
              <div id="keyTopics" class="flex flex-wrap gap-2"></div>
            </div>

            <div class="flex justify-between items-center flex-wrap gap-4">
              <div class="flex gap-3">
                <button
                  id="markWatchedButton"
                  class="px-6 py-3 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-xl hover:from-green-600 hover:to-green-700 transition-all duration-300 transform hover:scale-105 shadow-lg font-semibold"
                >
                  <i class="fas fa-check mr-2"></i> Mark as Watched
                </button>
                
                <button
                  id="generateSRTButton"
                  class="px-6 py-3 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-xl hover:from-blue-600 hover:to-purple-700 transition-all duration-300 transform hover:scale-105 shadow-lg font-semibold"
                >
                  <i class="fas fa-closed-captioning mr-2"></i> Generate Subtitles
                </button>
              </div>

              <a
                href="/course/<%= courseName %>"
                class="px-6 py-3 bg-gradient-to-r from-indigo-500 to-indigo-600 text-white rounded-xl hover:from-indigo-600 hover:to-indigo-700 transition-all duration-300 transform hover:scale-105 shadow-lg font-semibold"
              >
                <i class="fas fa-arrow-left mr-2"></i> Back to Course
              </a>
            </div>
            <% } else { %>
            <div
              class="text-center p-8 bg-red-50 dark:bg-red-900 text-red-700 dark:text-red-300 rounded-xl"
            >
              <i class="fas fa-exclamation-triangle text-4xl mb-4"></i>
              <h2 class="text-xl font-bold mb-2">Video Not Found</h2>
              <p>The requested video could not be found or is not available.</p>
              <a
                href="/course/<%= courseName %>"
                class="inline-block mt-4 px-4 py-2 bg-indigo-500 text-white rounded hover:bg-indigo-600 transition-colors"
              >
                <i class="fas fa-arrow-left mr-1"></i> Back to Course
              </a>
            </div>
            <% } %>
          </div>
        </div>
      </div>
    </div>

    <div class="lg:col-span-1">
      <% if (typeof chapters !== 'undefined' && chapters.length > 0) { %>
      <div class="glass-sidebar rounded-2xl p-6 mb-6">
        <h2 class="text-2xl font-bold text-white mb-6 border-b border-white/20 pb-2">
          üìö Chapters
        </h2>
        <div class="space-y-2">
          <% 
          // Sort chapters by extracting numbers
          const sortedChapters = chapters.sort((a, b) => {
            const aMatch = a.match(/(\d+)/);
            const bMatch = b.match(/(\d+)/);
            if (!aMatch || !bMatch) return a.localeCompare(b);
            return parseInt(aMatch[0], 10) - parseInt(bMatch[0], 10);
          });
          
          sortedChapters.forEach(chapter => {
            const chapterVideos = videosByChapter[chapter];
            const watchedCount = chapterVideos.filter(v => v.watched).length;
            const totalCount = chapterVideos.length;
            const isCompleted = watchedCount === totalCount;
          %>
          <details class="border border-gray-200 rounded-lg">
            <summary class="font-medium text-gray-700 dark:text-gray-300 p-3 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700 rounded-lg">
              <span class="flex items-center justify-between">
                <span>
                  <%= chapter %>
                  <% if (isCompleted) { %>
                    <i class="fas fa-check-circle text-green-500 ml-2"></i>
                  <% } %>
                </span>
                <span class="text-xs text-gray-500"><%= watchedCount %>/<%= totalCount %></span>
              </span>
            </summary>
            <div class="p-3 pt-0">
              <ul class="space-y-1">
                <% chapterVideos.forEach((chapterVideo, index) => { %>
                <li>
                  <a
                    href="/videos/<%= encodeURIComponent(courseName) %>/<%= chapterVideo._id %>"
                    class="block text-sm p-2 rounded <%= chapterVideo._id.toString() === video._id.toString() ? 'bg-indigo-100 text-indigo-600 font-medium' : 'text-gray-600 hover:text-indigo-600 hover:bg-gray-50' %>"
                  >
                    <%= (index + 1) %>. <%= chapterVideo.title %>
                    <% if (chapterVideo.watched) { %>
                      <i class="fas fa-check text-green-500 ml-1"></i>
                    <% } %>
                  </a>
                </li>
                <% }); %>
              </ul>
            </div>
          </details>
          <% }); %>
        </div>
      </div>
      <% } %>
      
      <!-- Gamification Sidebar -->
      <div class="gamification-sidebar">
        <h3 class="text-xl font-bold text-white mb-6 border-b border-white/20 pb-2">üéÆ Your Progress</h3>
        <div class="flex items-center justify-between mb-3">
          <span class="text-sm">Level</span>
          <div class="level-badge" style="width: 35px; height: 35px; font-size: 0.9rem;">
            <span class="user-level">1</span>
          </div>
        </div>
        <div class="flex items-center justify-between mb-3">
          <span class="text-sm">Points</span>
          <span class="font-bold user-points">0</span>
        </div>
        <div class="flex items-center justify-between mb-4">
          <span class="text-sm">Streak</span>
          <div class="flex items-center gap-1">
            <span class="text-lg">üî•</span>
            <span class="font-bold user-streak">0</span>
          </div>
        </div>
        <a href="/profile" class="block w-full text-center bg-white bg-opacity-20 hover:bg-opacity-30 transition-colors py-2 px-4 rounded-lg text-sm font-medium">
          View Full Progress
        </a>
      </div>
      
      <!-- Quick Quiz Button -->
      <div class="glass-sidebar rounded-2xl p-6 mb-6">
        <h3 class="text-lg font-semibold text-white mb-3">üìö Test Your Knowledge</h3>
        <button 
          id="quickQuizBtn"
          class="w-full bg-gradient-to-r from-purple-500 to-pink-500 text-white py-2 px-4 rounded-lg font-medium hover:from-purple-600 hover:to-pink-600 transition-all duration-200 transform hover:scale-105"
        >
          Take Quick Quiz
        </button>
      </div>

      <!-- Todo List from PDFs -->
      <div class="glass-sidebar rounded-2xl p-6 mb-6">
        <h3 class="text-lg font-semibold text-white mb-3">ü§ñ AI-Powered Todos</h3>
        <div id="todoContainer" class="max-h-64 overflow-y-auto">
          <div class="text-sm text-white text-center py-4" id="todoLoading">
            <div class="flex items-center justify-center mb-2">
              <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
              <span>AI analyzing video & PDFs...</span>
            </div>
            <div class="text-xs opacity-75">Extracting actionable tasks from content</div>
          </div>
        </div>
        <div class="mt-4 pt-4 border-t border-white border-opacity-20">
          <div class="flex justify-between items-center mb-2">
            <span class="text-sm font-medium text-white" id="todoProgress">0/0 completed</span>
            <button id="refreshTodos" class="text-xs text-white opacity-75 hover:opacity-100 transition-opacity px-2 py-1 rounded bg-white bg-opacity-10 hover:bg-opacity-20">
              <i class="fas fa-sync-alt mr-1"></i> Refresh AI
            </button>
          </div>
          <div class="flex justify-between items-center mb-2">
            <span class="text-xs text-white opacity-75" id="todoTime">
              <i class="fas fa-clock mr-1"></i>
              Est. time: 0 min
            </span>
            <span class="text-xs text-white opacity-60" id="todoSource">AI-powered</span>
          </div>
          <div class="w-full bg-gray-200 rounded-full h-2">
            <div id="todoProgressBar" class="todo-progress h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
          </div>
        </div>
      </div>

      <!-- Course Chatbot -->
      <div class="glass-sidebar rounded-2xl p-6 mb-6">
        <h3 class="text-lg font-semibold text-white mb-3">ü§ñ Course Assistant</h3>
        <div id="chatContainer" class="h-64 border rounded-lg p-3 mb-3 overflow-y-auto bg-gray-50">
          <div class="text-sm text-gray-500 text-center py-4">
            Ask me anything about this course! I'll explain it like David J. Malan would.
          </div>
        </div>
        <div class="flex gap-2">
          <input 
            type="text" 
            id="chatInput" 
            placeholder="Ask about the course..."
            class="flex-1 px-3 py-2 border rounded-lg text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
          <button 
            id="sendChatBtn"
            class="px-3 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
          >
            <i class="fas fa-paper-plane"></i>
          </button>
        </div>
      </div>
      


      <div class="glass-sidebar rounded-2xl p-6 mb-6">
        <h2 class="text-xl font-semibold text-white mb-4">
          ‚å®Ô∏è Keyboard Shortcuts
        </h2>
        <ul class="space-y-2 text-sm text-gray-600">
          <li class="flex justify-between">
            <span class="font-medium">F</span>
            <span>Toggle fullscreen</span>
          </li>
          <li class="flex justify-between">
            <span class="font-medium">J</span>
            <span>Rewind 15 seconds</span>
          </li>
          <li class="flex justify-between">
            <span class="font-medium">K</span>
            <span>Play/Pause</span>
          </li>
          <li class="flex justify-between">
            <span class="font-medium">L</span>
            <span>Forward 15 seconds</span>
          </li>
        </ul>
        <div class="mt-4">
          <a
            href="/course/<%= courseName %>"
            class="block py-2 px-4 bg-indigo-100 dark:bg-indigo-900 text-indigo-700 dark:text-indigo-300 rounded-lg text-center"
          >
            <i class="fas fa-arrow-left mr-2"></i> Back to Course
          </a>
        </div>
      </div>

      <% if (typeof pdfs !== 'undefined' && pdfs.length > 0) { %>
      <div class="glass-sidebar rounded-2xl p-6">
        <h2 class="text-xl font-semibold text-white mb-4">
          <i class="fas fa-file-pdf text-red-400 mr-2"></i> PDF Resources
        </h2>
        <ul class="space-y-2">
          <% pdfs.forEach((pdf, index) => { %>
          <li>
            <a
              href="/pdf/<%= pdf.path %>"
              target="_blank"
              class="flex items-center py-2 px-3 rounded-lg hover:bg-gray-100 transition-colors"
            >
              <span
                class="flex-shrink-0 w-6 h-6 flex items-center justify-center bg-red-100 text-red-500 rounded-full mr-2"
              >
                <%= index + 1 %>
              </span>
              <span class="text-gray-700 dark:text-gray-300"
                ><%= pdf.name %></span
              >
            </a>
          </li>
          <% }); %>
        </ul>
      </div>
      <% } %>
    </div>
  </div>
</main>

<!-- Key hint element -->
<div id="keyHint" class="key-hint"></div>

<script src="/js/connection-monitor.js"></script>
<script src="/js/gamification.js"></script>
<script src="/js/quiz-system.js"></script>
<script src="/js/ai-integration.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const videoPlayer = document.getElementById('videoPlayer');
    const markWatchedButton = document.getElementById('markWatchedButton');
    const forceSyncButton = document.getElementById('forceSyncButton');
    const prevButton = document.getElementById('prevButton');
    const nextButton = document.getElementById('nextButton');
    const keyHint = document.getElementById('keyHint');
    const quickQuizBtn = document.getElementById('quickQuizBtn');
    const chatContainer = document.getElementById('chatContainer');
    const chatInput = document.getElementById('chatInput');
    const sendChatBtn = document.getElementById('sendChatBtn');
    const todoContainer = document.getElementById('todoContainer');
    const todoLoading = document.getElementById('todoLoading');
    const todoProgress = document.getElementById('todoProgress');
    const todoTime = document.getElementById('todoTime');
    
    // Define variables for chat functionality
    let courseName = '<%= courseName %>';
    let videoId = '<%= video ? video._id : "" %>';
    
    // Chat history storage
    let chatHistory = JSON.parse(localStorage.getItem(`chat_${courseName}_${videoId}`) || '[]');
    
    // Load existing chat history
    function loadChatHistory() {
      chatContainer.innerHTML = '';
      if (chatHistory.length === 0) {
        // Add welcome message
        const welcomeDiv = document.createElement('div');
        welcomeDiv.className = 'text-center py-4';
        welcomeDiv.innerHTML = `
          <div class="mb-2">
            <i class="fas fa-robot text-2xl text-blue-500"></i>
          </div>
          <div class="text-sm text-gray-600 mb-2">
            <strong>Hi! I'm your course assistant!</strong>
          </div>
          <div class="text-xs text-gray-500">
            Ask me anything about this course.<br>
            I'll explain it like David J. Malan would! üéì
          </div>
        `;
        chatContainer.appendChild(welcomeDiv);
        return;
      }
      
      chatHistory.forEach(msg => {
        addMessageToChat(msg.message, msg.isUser, false);
      });
      chatContainer.scrollTop = chatContainer.scrollHeight;
    }
    
    // Add message to chat
    function addMessageToChat(message, isUser, saveToHistory = true) {
      const messageDiv = document.createElement('div');
      messageDiv.className = `chat-message mb-3 ${isUser ? 'text-right' : 'text-left'}`;
      
      const bubble = document.createElement('div');
      bubble.className = `inline-block max-w-xs px-3 py-2 rounded-lg text-sm break-words ${
        isUser 
          ? 'bg-blue-500 text-white rounded-br-sm' 
          : 'bg-white border shadow-sm text-gray-800 rounded-bl-sm'
      }`;
      
      // Handle line breaks in messages
      bubble.innerHTML = message.replace(/\n/g, '<br>');
      
      messageDiv.appendChild(bubble);
      
      if (chatContainer.children.length === 1 && (chatContainer.children[0].textContent.includes('Ask me anything') || chatContainer.children[0].textContent.includes('course assistant'))) {
        chatContainer.innerHTML = '';
      }
      
      chatContainer.appendChild(messageDiv);
      chatContainer.scrollTop = chatContainer.scrollHeight;
      
      if (saveToHistory) {
        chatHistory.push({ message, isUser, timestamp: Date.now() });
        localStorage.setItem(`chat_${courseName}_${videoId}`, JSON.stringify(chatHistory));
      }
    }
    
    // Send chat message
    async function sendChatMessage() {
      const message = chatInput.value.trim();
      if (!message) return;
      
      addMessageToChat(message, true);
      chatInput.value = '';
      
      // Show typing indicator
      const typingDiv = document.createElement('div');
      typingDiv.className = 'mb-3 text-left typing-indicator';
      typingDiv.innerHTML = '<div class="inline-block bg-white border shadow-sm px-3 py-2 rounded-lg rounded-bl-sm text-sm text-gray-500"><i class="fas fa-robot mr-1"></i> David is thinking...</div>';
      chatContainer.appendChild(typingDiv);
      chatContainer.scrollTop = chatContainer.scrollHeight;
      
      // Disable input while processing
      chatInput.disabled = true;
      sendChatBtn.disabled = true;
      sendChatBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
      
      try {
        const response = await fetch('/api/chatbot', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            message,
            courseName,
            videoTitle: '<%= video ? video.title : "" %>'
          })
        });
        
        chatContainer.removeChild(typingDiv);
        
        if (response.ok) {
          const data = await response.json();
          addMessageToChat(data.response, false);
        } else {
          addMessageToChat('Sorry, I\'m having trouble right now. Please try again later.', false);
        }
      } catch (error) {
        if (chatContainer.contains(typingDiv)) {
          chatContainer.removeChild(typingDiv);
        }
        addMessageToChat('I\'m offline right now. Please check your connection and try again.', false);
      } finally {
        // Re-enable input
        chatInput.disabled = false;
        sendChatBtn.disabled = false;
        sendChatBtn.innerHTML = '<i class="fas fa-paper-plane"></i>';
        chatInput.focus();
      }
    }
    
    // Chat event listeners
    if (sendChatBtn) {
      sendChatBtn.addEventListener('click', sendChatMessage);
    }
    
    if (chatInput) {
      chatInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          sendChatMessage();
        }
      });
    }
    
    // Load chat history on page load
    loadChatHistory();
    
    // Load todos for this video
    loadVideoTodos();
    
    // Initialize AI service status
    checkAIServiceStatus();
    
    // Refresh todos button
    const refreshTodosBtn = document.getElementById('refreshTodos');
    if (refreshTodosBtn) {
      refreshTodosBtn.addEventListener('click', async function() {
        const videoTitle = '<%= video ? video.title : "" %>';
        const courseName = '<%= courseName %>';
        
        if (!videoTitle || !courseName) return;
        
        // Update button state
        this.disabled = true;
        this.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i> Generating...';
        
        // Show loading state
        todoContainer.innerHTML = `
          <div class="text-sm text-white text-center py-4">
            <div class="flex items-center justify-center mb-2">
              <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
              <span>AI re-analyzing content...</span>
            </div>
            <div class="text-xs opacity-75">Generating fresh actionable tasks</div>
          </div>
        `;
        
        try {
          const response = await fetch('/api/video/todos/generate', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ videoTitle, courseName })
          });
          
          if (response.ok) {
            const data = await response.json();
            if (data.todos && data.todos.length > 0) {
              renderTodos(data.todos);
              loadTodoProgress();
              
              // Update source indicator
              const todoSource = document.getElementById('todoSource');
              if (todoSource) {
                todoSource.textContent = 'AI-fresh';
              }
            } else {
              todoContainer.innerHTML = '<div class="text-sm text-white opacity-75 text-center py-4">No AI todos generated</div>';
            }
          } else {
            throw new Error('Failed to generate AI todos');
          }
        } catch (error) {
          console.error('Error refreshing todos:', error);
          todoContainer.innerHTML = '<div class="text-sm text-red-300 text-center py-4">Failed to generate AI todos</div>';
        } finally {
          // Reset button
          this.disabled = false;
          this.innerHTML = '<i class="fas fa-sync-alt mr-1"></i> Refresh AI';
        }
      });
    }
    
    // Add todo search functionality
    const todoSearchInput = document.createElement('input');
    todoSearchInput.type = 'text';
    todoSearchInput.placeholder = 'Search todos...';
    todoSearchInput.className = 'w-full px-3 py-2 text-sm border rounded-lg mb-3 focus:outline-none focus:ring-2 focus:ring-blue-500';
    todoSearchInput.style.display = 'none';
    
    todoSearchInput.addEventListener('input', (e) => {
      const searchTerm = e.target.value.toLowerCase();
      const todoItems = todoContainer.querySelectorAll('.todo-item');
      
      todoItems.forEach(item => {
        const text = item.textContent.toLowerCase();
        item.style.display = text.includes(searchTerm) ? 'flex' : 'none';
      });
    });
    
    // Add search input after todos are loaded
    setTimeout(() => {
      if (todoContainer.children.length > 0) {
        todoContainer.insertBefore(todoSearchInput, todoContainer.firstChild);
        todoSearchInput.style.display = 'block';
      }
    }, 1000);
    
    // Check AI service status
    async function checkAIServiceStatus() {
      try {
        const response = await fetch('/api/ai/status');
        if (response.ok) {
          const data = await response.json();
          console.log('AI Service Status:', data.status);
        }
      } catch (error) {
        console.log('AI service check failed:', error.message);
      }
    }
    
    // Load todos for video
    async function loadVideoTodos() {
      try {
        const videoTitle = '<%= video ? video.title : "" %>';
        const courseName = '<%= courseName %>';
        
        if (!videoTitle || !courseName) {
          todoLoading.textContent = 'No video information available';
          return;
        }
        
        const response = await fetch(`/api/video/todos/${encodeURIComponent(courseName)}/${encodeURIComponent(videoTitle)}`);
        const data = await response.json();
        
        if (data.todos && data.todos.length > 0) {
          renderTodos(data.todos);
          loadTodoProgress();
        } else {
          todoLoading.textContent = 'No todos found for this video';
        }
      } catch (error) {
        console.error('Error loading todos:', error);
        todoLoading.textContent = 'Failed to load todos';
      }
    }
    
    // Render todos in the container
    function renderTodos(todoCategories) {
      todoContainer.innerHTML = '';
      
      todoCategories.forEach(category => {
        const categoryDiv = document.createElement('div');
        categoryDiv.className = 'mb-4';
        
        const categoryHeader = document.createElement('h4');
        categoryHeader.className = 'font-medium text-gray-700 mb-2 text-sm';
        categoryHeader.textContent = category.category;
        categoryDiv.appendChild(categoryHeader);
        
        const todoList = document.createElement('div');
        todoList.className = 'space-y-2';
        
        category.items.forEach(todo => {
          const todoItem = document.createElement('div');
          todoItem.className = `todo-item flex items-start gap-3 p-3 rounded-lg border priority-${todo.priority} hover:bg-gray-50 transition-all duration-200`;
          
          const checkbox = document.createElement('input');
          checkbox.type = 'checkbox';
          checkbox.id = todo.id;
          checkbox.className = 'mt-1 rounded text-blue-500 focus:ring-blue-500';
          checkbox.addEventListener('change', () => updateTodoStatus(todo.id, checkbox.checked));
          
          const label = document.createElement('label');
          label.htmlFor = todo.id;
          label.className = 'flex-1 text-sm cursor-pointer';
          
          const todoText = document.createElement('div');
          todoText.className = 'todo-text font-medium text-gray-800';
          todoText.textContent = todo.text;
          
          const todoMeta = document.createElement('div');
          todoMeta.className = 'flex items-center gap-2 mt-2';
          todoMeta.innerHTML = `
            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
              todo.priority === 'high' ? 'bg-red-100 text-red-700' :
              todo.priority === 'medium' ? 'bg-yellow-100 text-yellow-700' :
              'bg-green-100 text-green-700'
            }">
              <i class="fas fa-${
                todo.priority === 'high' ? 'exclamation-triangle' :
                todo.priority === 'medium' ? 'clock' : 'check-circle'
              } mr-1"></i>
              ${todo.priority}
            </span>
            <span class="text-gray-500 text-xs">
              <i class="fas fa-clock mr-1"></i>
              ${todo.estimatedTime}
            </span>
            <span class="text-gray-400 text-xs">
              <i class="fas fa-tag mr-1"></i>
              ${todo.category}
            </span>
          `;
          
          label.appendChild(todoText);
          label.appendChild(todoMeta);
          
          todoItem.appendChild(checkbox);
          todoItem.appendChild(label);
          
          todoList.appendChild(todoItem);
        });
        
        categoryDiv.appendChild(todoList);
        todoContainer.appendChild(categoryDiv);
      });
    }
    
    // Update todo completion status
    async function updateTodoStatus(todoId, completed) {
      try {
        const videoTitle = '<%= video ? video.title : "" %>';
        const courseName = '<%= courseName %>';
        
        await fetch('/api/video/todos/update', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            videoTitle,
            courseName,
            todoId,
            completed
          })
        });
        
        updateTodoProgress();
      } catch (error) {
        console.error('Error updating todo:', error);
      }
    }
    
    // Load todo progress from server
    async function loadTodoProgress() {
      try {
        const videoTitle = '<%= video ? video.title : "" %>';
        const courseName = '<%= courseName %>';
        
        const response = await fetch(`/api/video/todos/progress/${encodeURIComponent(courseName)}/${encodeURIComponent(videoTitle)}`);
        const data = await response.json();
        
        // Update checkboxes based on saved progress
        Object.entries(data.progress || {}).forEach(([todoId, status]) => {
          const checkbox = document.getElementById(todoId);
          if (checkbox) {
            checkbox.checked = status.completed;
          }
        });
        
        updateTodoProgress();
      } catch (error) {
        console.error('Error loading todo progress:', error);
      }
    }
    
    // Update progress display
    function updateTodoProgress() {
      const checkboxes = todoContainer.querySelectorAll('input[type="checkbox"]');
      const completed = Array.from(checkboxes).filter(cb => cb.checked).length;
      const total = checkboxes.length;
      
      const percentage = total > 0 ? Math.round((completed / total) * 100) : 0;
      
      todoProgress.textContent = `${completed}/${total} completed (${percentage}%)`;
      
      // Update progress bar
      const progressBar = document.getElementById('todoProgressBar');
      if (progressBar) {
        progressBar.style.width = `${percentage}%`;
      }
      
      // Calculate estimated time for remaining tasks
      let remainingTime = 0;
      checkboxes.forEach(checkbox => {
        if (!checkbox.checked) {
          const label = checkbox.nextElementSibling;
          const timeElements = label.querySelectorAll('.text-xs');
          timeElements.forEach(timeEl => {
            const timeMatch = timeEl.textContent.match(/(\d+)(?:-\d+)?\s*min/);
            if (timeMatch) {
              remainingTime += parseInt(timeMatch[1]);
            }
          });
        }
      });
      
      todoTime.innerHTML = `<i class="fas fa-clock mr-1"></i>Est. time: ${remainingTime} min`;
      
      // Show completion celebration
      if (completed === total && total > 0) {
        showCompletionCelebration();
      }
    }
    
    // Show completion celebration
    function showCompletionCelebration() {
      const celebration = document.createElement('div');
      celebration.className = 'fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 bg-green-500 text-white px-6 py-4 rounded-lg shadow-lg z-50 animate-bounce';
      celebration.innerHTML = `
        <div class="text-center">
          <i class="fas fa-check-circle text-2xl mb-2"></i>
          <div class="font-bold">All Todos Complete!</div>
          <div class="text-sm">Great job! üéâ</div>
        </div>
      `;
      
      document.body.appendChild(celebration);
      
      setTimeout(() => {
        celebration.remove();
      }, 3000);
    }

    // Load video summary and topics
    const videoName = '<%= video ? video.title : "" %>';
    if (videoName) {
      fetch(`/api/video/summary/${encodeURIComponent(videoName)}`)
        .then(response => response.json())
        .then(data => {
          if (data.summary) {
            document.getElementById('summaryText').textContent = data.summary;
            const topicsContainer = document.getElementById('keyTopics');
            data.keyTopics.forEach(topic => {
              const topicTag = document.createElement('span');
              topicTag.className = 'bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded-full';
              topicTag.textContent = topic;
              topicsContainer.appendChild(topicTag);
            });
            document.getElementById('videoSummary').style.display = 'block';
          }
        })
        .catch(error => console.warn('Failed to load video summary:', error));
    }

    // Check if autoplay parameter is present in URL
    const urlParams = new URLSearchParams(window.location.search);
    const shouldAutoplay = urlParams.get('autoplay') === 'true';

    // Autoplay video if parameter is present
    if (shouldAutoplay && videoPlayer) {
      videoPlayer.play().catch(error => {
        console.warn('Autoplay was prevented by browser:', error);
      });
    }

    let isWatched = <%= video && video.watched ? 'true' : 'false' %>;
    let watchedBadge = document.querySelector('.watched-badge');

    // Function to show key hint
    function showKeyHint(text) {
      keyHint.textContent = text;
      keyHint.classList.add('visible');
      setTimeout(() => {
        keyHint.classList.remove('visible');
      }, 1000);
    }

    // Function to mark video as watched
    function markVideoAsWatched() {
      console.log(`Client: Marking video as watched: ${videoId} in course ${courseName}`);

      // Special handling for AWS course with special characters
      const encodedCourseName = courseName.includes('[') ?
        encodeURIComponent(courseName) : courseName;

      fetch(`/api/mark-watched`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          videoId: videoId,
          courseName: courseName
        })
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Failed to mark video as watched');
        }
        return response.json();
      })
      .then(data => {
        isWatched = true;
        watchedBadge.classList.remove('unwatched');
        watchedBadge.classList.add('watched');
        watchedBadge.innerHTML = '<i class="fas fa-check mr-1"></i> Watched';
        
        // Trigger gamification events
        if (window.gamificationSystem) {
          const isLastVideo = <%= isLastVideo ? 'true' : 'false' %>;
          const isLastInChapter = <%= isLastInChapter ? 'true' : 'false' %>;
          
          window.gamificationSystem.onVideoCompleted({
            videoId: videoId,
            courseName: courseName,
            isLastVideo: isLastVideo,
            isLastInChapter: isLastInChapter
          });
          
          window.gamificationSystem.incrementDailyVideoCount();
          
          // Sync with localStorage after marking as watched
          setTimeout(() => {
            window.gamificationSystem.syncWithLocalStorageVideos();
            // Reload watch dates for calendar if on profile page
            if (window.location.pathname === '/profile' && window.loadWatchDates) {
              window.loadWatchDates().then(() => {
                if (window.populateStreakCalendar) window.populateStreakCalendar();
              });
            }
          }, 500);
        }
      })
      .catch(error => {
        console.error('Error:', error);
      });
    }

    // Force sync button
    if (forceSyncButton) {
      forceSyncButton.addEventListener('click', function() {
        fetch(`/api/videos/${videoId}/sync`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Failed to sync video status');
          }
          return response.json();
        })
        .then(data => {
          alert('Video status synced successfully!');
          location.reload();
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Failed to sync video status. Please try again.');
        });
      });
    }

    // Mark as watched button
    if (markWatchedButton) {
      markWatchedButton.addEventListener('click', markVideoAsWatched);
    }
    
    // Generate SRT button
    const generateSRTButton = document.getElementById('generateSRTButton');
    if (generateSRTButton) {
      generateSRTButton.addEventListener('click', async function() {
        const videoTitle = '<%= video ? video.title : "" %>';
        if (!videoTitle) return;
        
        // Update button state
        this.disabled = true;
        this.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Generating...';
        
        // Show progress indicator
        const progressIndicator = document.getElementById('srt-progress');
        if (progressIndicator) {
          progressIndicator.style.display = 'block';
          progressIndicator.innerHTML = 'üé¨ Starting subtitle generation...';
        }
        
        try {
          // Trigger SRT generation
          const response = await fetch('/api/generate-srt', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              videoTitle,
              courseName: '<%= courseName %>',
              videoId: '<%= video ? video._id : "" %>'
            })
          });
          
          if (response.ok) {
            // Start monitoring progress
            monitorSRTProgress();
          } else {
            throw new Error('Failed to start SRT generation');
          }
        } catch (error) {
          console.error('SRT generation error:', error);
          if (progressIndicator) {
            progressIndicator.innerHTML = '‚ö† Failed to start generation';
            progressIndicator.className = progressIndicator.className.replace('bg-blue-500', 'bg-red-500');
            setTimeout(() => progressIndicator.style.display = 'none', 3000);
          }
        } finally {
          // Reset button
          this.disabled = false;
          this.innerHTML = '<i class="fas fa-closed-captioning mr-2"></i> Generate Subtitles';
        }
      });
    }

    // Function to navigate to next video
    function navigateToNextVideo() {
      const isLastVideo = <%= isLastVideo ? 'true' : 'false' %>;
      const nextVideoId = '<%= typeof nextVideoId !== "undefined" ? nextVideoId : "" %>';
      const isLastInChapter = <%= isLastInChapter ? 'true' : 'false' %>;

      if (!isLastVideo && nextVideoId) {
        try {
          // Get current URL path and replace video ID
          const currentPath = window.location.pathname;
          const pathParts = currentPath.split('/');
          pathParts[pathParts.length - 1] = nextVideoId;
          const nextUrl = pathParts.join('/') + '?autoplay=true';
          
          // If this is the last video in a chapter, show a brief message
          if (isLastInChapter) {
            showKeyHint('Chapter Complete! Moving to next chapter...');
            setTimeout(() => {
              window.location.href = nextUrl;
            }, 1500);
          } else {
            window.location.href = nextUrl;
          }
        } catch (error) {
          console.error('URL construction error:', error);
          // Simple fallback
          const safeCourseName = encodeURIComponent(courseName);
          window.location.href = `/videos/${safeCourseName}/${nextVideoId}?autoplay=true`;
        }
      }
    }

    // Navigation buttons
    if (prevButton) {
      prevButton.addEventListener('click', function() {
        const safeCourseName = encodeURIComponent(courseName);
        const prevId = '<%= typeof prevVideoId !== "undefined" ? prevVideoId : "" %>';
        if (prevId) {
          window.location.href = `/videos/${safeCourseName}/${prevId}`;
        }
      });
    }

    if (nextButton) {
      nextButton.addEventListener('click', function() {
        const safeCourseName = encodeURIComponent(courseName);
        const nextId = '<%= typeof nextVideoId !== "undefined" ? nextVideoId : "" %>';
        if (nextId) {
          window.location.href = `/videos/${safeCourseName}/${nextId}?autoplay=true`;
        }
      });
    }

    // Check for SRT subtitle file and enable CC
    const checkForSubtitles = async () => {
      try {
        const videoTitle = '<%= video ? video.title : "" %>';
        const courseName = '<%= courseName %>';
        
        // Try to load SRT file based on video title
        const srtUrl = `/subtitles/${encodeURIComponent(courseName)}/${encodeURIComponent(videoTitle)}.srt`;
        const response = await fetch(srtUrl);
        
        if (response.ok) {
          console.log('SRT file found, converting to WebVTT');
          const srtContent = await response.text();
          const vttContent = convertSRTtoVTT(srtContent);
          
          // Create blob URL for WebVTT content
          const blob = new Blob([vttContent], { type: 'text/vtt' });
          const vttUrl = URL.createObjectURL(blob);
          
          // Add track to video
          const track = document.createElement('track');
          track.kind = 'subtitles';
          track.label = 'English';
          track.srclang = 'en';
          track.src = vttUrl;
          track.default = true;
          videoPlayer.appendChild(track);
          
          // Enable CC button
          const ccButton = document.createElement('button');
          ccButton.innerHTML = 'üî§ CC';
          ccButton.className = 'absolute top-2 right-2 bg-black bg-opacity-50 text-white px-2 py-1 rounded text-sm hover:bg-opacity-70 transition-opacity z-10';
          ccButton.style.opacity = '0.7';
          
          // Add SRT generation progress indicator
          const srtProgress = document.createElement('div');
          srtProgress.id = 'srt-progress';
          srtProgress.className = 'absolute top-2 left-2 bg-blue-500 bg-opacity-90 text-white px-3 py-1 rounded-lg text-xs font-medium backdrop-filter backdrop-blur-sm border border-white border-opacity-20';
          srtProgress.style.display = 'none';
          srtProgress.innerHTML = 'üé¨ Generating subtitles... 0%';
          
          const videoContainer = document.querySelector('.video-container');
          if (videoContainer) {
            videoContainer.style.position = 'relative';
            videoContainer.appendChild(srtProgress);
          }
          
          ccButton.onclick = () => {
            const textTracks = videoPlayer.textTracks;
            if (textTracks.length > 0) {
              const textTrack = textTracks[textTracks.length - 1];
              if (textTrack.mode === 'showing') {
                textTrack.mode = 'hidden';
                ccButton.style.opacity = '0.7';
                ccButton.style.backgroundColor = 'rgba(0,0,0,0.5)';
              } else {
                textTrack.mode = 'showing';
                ccButton.style.opacity = '1';
                ccButton.style.backgroundColor = 'rgba(59, 130, 246, 0.8)';
              }
            }
          };
          
          const videoContainer = document.querySelector('.video-container');
          if (videoContainer) {
            videoContainer.style.position = 'relative';
            videoContainer.appendChild(ccButton);
          }
        }
      } catch (error) {
        console.log('No SRT file found or error checking:', error.message);
      }
    };
    
    // Convert SRT to WebVTT format
    function convertSRTtoVTT(srtContent) {
      let vtt = 'WEBVTT\n\n';
      const lines = srtContent.split('\n');
      let i = 0;
      
      while (i < lines.length) {
        // Skip sequence number
        if (lines[i].match(/^\d+$/)) {
          i++;
          
          // Get timestamp line
          if (i < lines.length && lines[i].includes('-->')) {
            const timeLine = lines[i].replace(/,/g, '.');
            vtt += timeLine + '\n';
            i++;
            
            // Get subtitle text
            let subtitleText = '';
            while (i < lines.length && lines[i].trim() !== '') {
              subtitleText += lines[i] + '\n';
              i++;
            }
            vtt += subtitleText + '\n';
          }
        }
        i++;
      }
      
      return vtt;
    }
    
    // Monitor SRT generation progress
    const monitorSRTProgress = async () => {
      const videoTitle = '<%= video ? video.title : "" %>';
      if (!videoTitle) return;
      
      const progressIndicator = document.getElementById('srt-progress');
      if (!progressIndicator) return;
      
      try {
        const response = await fetch(`/api/srt-progress/${encodeURIComponent(videoTitle)}`);
        if (response.ok) {
          const data = await response.json();
          
          if (data.status === 'processing') {
            progressIndicator.style.display = 'block';
            progressIndicator.innerHTML = `üé¨ Generating subtitles... ${data.progress}%`;
            
            // Continue monitoring
            setTimeout(monitorSRTProgress, 2000);
          } else if (data.status === 'completed') {
            progressIndicator.innerHTML = '‚úì Subtitles ready!';
            setTimeout(() => {
              progressIndicator.style.display = 'none';
              // Refresh to load new subtitles
              checkForSubtitles();
            }, 2000);
          } else if (data.status === 'failed') {
            progressIndicator.innerHTML = '‚ö† Subtitle generation failed';
            progressIndicator.className = progressIndicator.className.replace('bg-blue-500', 'bg-red-500');
            setTimeout(() => progressIndicator.style.display = 'none', 3000);
          }
        }
      } catch (error) {
        console.log('SRT progress check failed:', error.message);
      }
    };
    
    // Check for subtitles when video loads
    if (videoPlayer) {
      checkForSubtitles();
      monitorSRTProgress();
      
      // Fix captions display
      videoPlayer.addEventListener('loadedmetadata', function() {
        const tracks = videoPlayer.textTracks;
        for (let i = 0; i < tracks.length; i++) {
          tracks[i].mode = 'showing';
        }
      });
      document.addEventListener('keydown', function(e) {
        // Only handle shortcuts if not typing in an input and video is ready
        if (!videoPlayer || videoPlayer.readyState < 2 ||
            document.activeElement.tagName === 'INPUT' ||
            document.activeElement.tagName === 'TEXTAREA' ||
            document.activeElement.isContentEditable) {
          return;
        }

        const key = e.key.toLowerCase();
        if (['f', 'j', 'k', 'l'].includes(key) || e.code === 'Space') {
          e.preventDefault();
        }

        switch(key) {
          case 'f':
            try {
              if (document.fullscreenElement) {
                document.exitFullscreen();
                showKeyHint('Exit Fullscreen');
              } else {
                videoPlayer.requestFullscreen();
                showKeyHint('Fullscreen');
              }
              if (window.gamificationSystem) {
                window.gamificationSystem.onKeyboardShortcut('F - Fullscreen');
              }
            } catch (err) {
              console.warn('Fullscreen error:', err);
            }
            break;
          case 'j':
            if (videoPlayer.duration) {
              videoPlayer.currentTime = Math.max(0, videoPlayer.currentTime - 10);
              showKeyHint('‚è™ -10s');
              if (window.gamificationSystem) {
                window.gamificationSystem.onKeyboardShortcut('J - Rewind');
              }
            }
            break;
          case 'k':
          case ' ':
            try {
              if (videoPlayer.paused) {
                videoPlayer.play().then(() => {
                  showKeyHint('‚ñ∂Ô∏è Play');
                }).catch(err => console.warn('Play error:', err));
              } else {
                videoPlayer.pause();
                showKeyHint('‚è∏Ô∏è Pause');
              }
              if (window.gamificationSystem) {
                window.gamificationSystem.onKeyboardShortcut('K - Play/Pause');
              }
            } catch (err) {
              console.warn('Play/pause error:', err);
            }
            break;
          case 'l':
            if (videoPlayer.duration) {
              videoPlayer.currentTime = Math.min(videoPlayer.duration, videoPlayer.currentTime + 10);
              showKeyHint('‚è© +10s');
              if (window.gamificationSystem) {
                window.gamificationSystem.onKeyboardShortcut('L - Forward');
              }
            }
            break;
        }
      });

      // Mark video as watched when it ends
      videoPlayer.addEventListener('ended', function() {
        markVideoAsWatched();
      });

      // Mark video as watched when 90% is watched and trigger quiz
      let quizTriggered = false;
      let watchedMarked = false;
      let lastUpdateTime = 0;
      
      videoPlayer.addEventListener('timeupdate', function() {
        // Throttle updates for performance
        const now = Date.now();
        if (now - lastUpdateTime < 1000) return;
        lastUpdateTime = now;
        
        if (!videoPlayer.duration || videoPlayer.duration === 0) return;
        
        const watchPercent = (videoPlayer.currentTime / videoPlayer.duration) * 100;
        
        if (watchPercent >= 90 && !watchedMarked) {
          markVideoAsWatched();
          watchedMarked = true;
        }
        
        if (watchPercent >= 90 && !quizTriggered && window.quizSystem) {
          quizTriggered = true;
          setTimeout(() => {
            generateSRTQuiz();
          }, 1000);
        }
      });
      
      // Generate quiz from SRT content or pre-generated
      async function generateSRTQuiz() {
        try {
          const response = await fetch(`/api/quiz/generate/${encodeURIComponent(courseName)}/${videoId}`);
          if (response.ok) {
            const data = await response.json();
            if (data.questions && data.questions.length > 0) {
              console.log(`Starting ${data.quizType} quiz for video: ${data.videoTitle}`);
              window.quizSystem.startQuiz(data.quizType || 'video', data.questions);
            } else {
              console.warn('No quiz questions available for this video');
            }
          } else {
            console.error('Failed to fetch quiz:', response.statusText);
          }
        } catch (error) {
          console.error('Failed to generate quiz:', error);
          // Fallback to general quiz
          if (window.quizSystem) {
            window.quizSystem.startQuiz('general');
          }
        }
      }
      
      // Quick quiz button handler
      if (quickQuizBtn) {
        quickQuizBtn.addEventListener('click', async function() {
          console.log('Quiz button clicked');
          
          if (!window.quizSystem) {
            console.error('Quiz system not loaded');
            
            // Try to load quiz system dynamically
            try {
              const script = document.createElement('script');
              script.src = '/js/quiz-system.js';
              script.onload = () => {
                console.log('Quiz system loaded dynamically');
                setTimeout(() => this.click(), 100);
              };
              script.onerror = () => {
                alert('Quiz system failed to load. Please refresh the page.');
              };
              document.head.appendChild(script);
              return;
            } catch (err) {
              alert('Quiz system is not available. Please refresh the page.');
              return;
            }
          }
          
          console.log('Quiz system available, generating quiz...');
          
          // Determine quiz type based on course content
          let quizType = 'general';
          const courseNameLower = courseName.toLowerCase();
          const videoTitle = '<%= video ? video.title.toLowerCase() : "" %>';
          
          if (courseNameLower.includes('terraform') || videoTitle.includes('terraform') ||
              courseNameLower.includes('hashicorp') || videoTitle.includes('hashicorp')) {
            quizType = 'terraform';
          } else if (courseNameLower.includes('davinci') || courseNameLower.includes('video') || 
              videoTitle.includes('davinci') || videoTitle.includes('resolve') || 
              videoTitle.includes('editing') || videoTitle.includes('color')) {
            quizType = 'video_editing';
          } else if (courseNameLower.includes('aws') || videoTitle.includes('aws')) {
            quizType = 'aws';
          } else if (courseNameLower.includes('devops') || videoTitle.includes('devops')) {
            quizType = 'devops';
          } else if (videoTitle.includes('programming') || videoTitle.includes('code')) {
            quizType = 'programming';
          }
          
          console.log(`Determined quiz type: ${quizType}`);
          
          // Show video summary when quiz starts
          const summarySection = document.getElementById('videoSummary');
          if (summarySection && summarySection.style.display === 'none') {
            summarySection.style.display = 'block';
          }
          
          // Show loading state
          const originalText = this.innerHTML;
          this.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> AI Generating Quiz...';
          this.disabled = true;
          
          // Check if online before trying API
          if (navigator.onLine) {
            try {
              const quizUrl = `/api/quiz/generate/${encodeURIComponent(courseName)}/${videoId}`;
              const controller = new AbortController();
              const timeoutId = setTimeout(() => controller.abort(), 15000);
              
              const response = await fetch(quizUrl, { signal: controller.signal });
              clearTimeout(timeoutId);
              
              if (response.ok) {
                const data = await response.json();
                if (data.questions && data.questions.length > 0) {
                  console.log(`Starting AI quiz with ${data.questions.length} questions`);
                  window.quizSystem.startQuiz(data.quizType || 'video', data.questions);
                  this.innerHTML = originalText;
                  this.disabled = false;
                  return;
                } else {
                  console.log('No AI questions returned, using fallback');
                }
              }
            } catch (error) {
              console.warn('API quiz failed, using offline quiz');
            }
          }
          
          // Fallback to determined quiz type
          console.log(`Using fallback ${quizType} quiz`);
          window.quizSystem.startQuiz(quizType);
          
          // Reset button state
          this.innerHTML = originalText;
          this.disabled = false;
        });
      }
    }
  });
</script>

<%- include('partials/footer') %>
