<%- include('partials/header', { title: `${video ? video.title : 'Video'} -
${courseName}`, extraStyles: `
<link rel="stylesheet" href="/css/gamification.css">
<link rel="stylesheet" href="/css/quiz-system.css">
<style>
  .video-container {
    position: relative;
    padding-bottom: 56.25%; /* 16:9 aspect ratio */
    height: 0;
    overflow: hidden;
  }
  .video-container video {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }
  .watched-badge {
    display: inline-flex;
    align-items: center;
    padding: 0.25rem 0.5rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 500;
    margin-left: 0.5rem;
  }
  .watched-badge.watched {
    background-color: rgba(16, 185, 129, 0.1);
    color: rgb(16, 185, 129);
  }
  .watched-badge.unwatched {
    background-color: rgba(239, 68, 68, 0.1);
    color: rgb(239, 68, 68);
  }
  .key-hint {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 1rem;
    border-radius: 0.5rem;
    font-size: 1.5rem;
    font-weight: bold;
    z-index: 50;
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  .key-hint.visible {
    opacity: 1;
  }
</style>
` }) %>

<!-- Main Content -->
<main class="flex-grow overflow-y-auto px-4 py-8 md:px-8">
  <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
    <div class="lg:col-span-3">
      <div
        class="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden"
      >
        <div class="p-6">
          <div class="mb-4">
            <div class="flex items-center justify-between">
              <div class="flex items-center">
                <h1 class="text-2xl font-bold text-gray-800 dark:text-white">
                  <%= video ? (video.title) : 'Video Not Found' %>
                </h1>
                <% if (video && video.watched) { %>
                <span class="watched-badge watched">
                  <i class="fas fa-check mr-1"></i> Watched
                </span>
                <% } else { %>
                <span class="watched-badge unwatched">
                  <i class="fas fa-times mr-1"></i> Unwatched
                </span>
                <% } %>
              </div>
              <button
                id="forceSyncButton"
                class="text-xs px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
              >
                <i class="fas fa-sync-alt mr-1"></i> Force Sync
              </button>
            </div>
            <p class="text-gray-600 dark:text-gray-400 mt-2">
              <%= video ? video.description : 'No description available' %>
            </p>
          </div>

          <div class="video-content-container">
            <% if (video && video !== null && video !== undefined) { %>
            <div class="video-container mb-4">
              <video id="videoPlayer" controls class="w-full">
                <source
                  src="/videos/<%= courseName %>/file/<%= video._id %>"
                  type="video/mp4"
                />
                <% if (video.captionsUrl) { %>
                <track
                  label="English"
                  kind="subtitles"
                  srclang="en"
                  src="/captions/<%= courseName %>/<%= video._id %>"
                  default
                />
                <% } %> Your browser does not support the video tag.
              </video>
            </div>
            <% if (video.captionsUrl) { %>
            <div class="flex items-center mt-2 mb-4">
              <i class="fas fa-closed-captioning text-gray-500 mr-2"></i>
              <span class="text-sm text-gray-600">Captions available</span>
            </div>
            <% } %> <% if (video.thumbnailUrl) { %>
            <div class="mt-2 mb-4">
              <!-- <img src="<%= video.thumbnailUrl %>" alt="Video thumbnail" class="w-full max-w-md mx-auto rounded shadow"> -->
            </div>
            <% } %> <% if (!video.videoUrl) { %>
            <div
              class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-4"
            >
              <p class="font-bold">Video File May Not Be Available</p>
              <p>
                This video might be available in offline mode. If the video
                doesn't play, try reconnecting to the internet.
              </p>
            </div>
            <% } %>

            <div class="flex justify-between items-center mb-4">
              <div class="flex space-x-2">
                <% if (!isFirstVideo) { %>
                <button
                  id="prevButton"
                  class="px-3 py-1 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
                >
                  <i class="fas fa-step-backward mr-1"></i> Previous
                </button>
                <% } %> <% if (!isLastVideo) { %>
                <button
                  id="nextButton"
                  class="px-3 py-1 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors"
                >
                  Next <i class="fas fa-step-forward ml-1"></i>
                </button>
                <% } %>
              </div>

              <div class="flex items-center">
                <span class="text-sm text-gray-600 dark:text-gray-400 mr-2">
                  <%= watchedVideos %>/<%= totalVideos %> videos (<%=
                  watchedPercent %>%)
                </span>
                <div
                  class="w-32 h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden"
                >
                  <div
                    class="h-full bg-green-500"
                    style="width: <%= watchedPercent %>%"
                  ></div>
                </div>
              </div>
            </div>

            <div class="flex justify-between items-center">
              <button
                id="markWatchedButton"
                class="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors"
              >
                <i class="fas fa-check mr-1"></i> Mark as Watched
              </button>

              <a
                href="/course/<%= courseName %>"
                class="px-4 py-2 bg-indigo-500 text-white rounded hover:bg-indigo-600 transition-colors"
              >
                <i class="fas fa-arrow-left mr-1"></i> Back to Course
              </a>
            </div>
            <% } else { %>
            <div
              class="text-center p-8 bg-red-50 dark:bg-red-900 text-red-700 dark:text-red-300 rounded-xl"
            >
              <i class="fas fa-exclamation-triangle text-4xl mb-4"></i>
              <h2 class="text-xl font-bold mb-2">Video Not Found</h2>
              <p>The requested video could not be found or is not available.</p>
              <a
                href="/course/<%= courseName %>"
                class="inline-block mt-4 px-4 py-2 bg-indigo-500 text-white rounded hover:bg-indigo-600 transition-colors"
              >
                <i class="fas fa-arrow-left mr-1"></i> Back to Course
              </a>
            </div>
            <% } %>
          </div>
        </div>
      </div>
    </div>

    <div class="lg:col-span-1">
      <!-- Gamification Sidebar -->
      <div class="gamification-sidebar">
        <h3 class="text-lg font-semibold mb-4">🎮 Your Progress</h3>
        <div class="flex items-center justify-between mb-3">
          <span class="text-sm">Level</span>
          <div class="level-badge" style="width: 35px; height: 35px; font-size: 0.9rem;">
            <span class="user-level">1</span>
          </div>
        </div>
        <div class="flex items-center justify-between mb-3">
          <span class="text-sm">Points</span>
          <span class="font-bold user-points">0</span>
        </div>
        <div class="flex items-center justify-between mb-4">
          <span class="text-sm">Streak</span>
          <div class="flex items-center gap-1">
            <span class="text-lg">🔥</span>
            <span class="font-bold user-streak">0</span>
          </div>
        </div>
        <a href="/profile" class="block w-full text-center bg-white bg-opacity-20 hover:bg-opacity-30 transition-colors py-2 px-4 rounded-lg text-sm font-medium">
          View Full Progress
        </a>
      </div>
      
      <!-- Quick Quiz Button -->
      <div class="bg-white rounded-xl shadow-lg p-4 mb-4">
        <h3 class="text-lg font-semibold text-gray-800 mb-3">📚 Test Your Knowledge</h3>
        <button 
          id="quickQuizBtn"
          class="w-full bg-gradient-to-r from-purple-500 to-pink-500 text-white py-2 px-4 rounded-lg font-medium hover:from-purple-600 hover:to-pink-600 transition-all duration-200 transform hover:scale-105"
        >
          Take Quick Quiz
        </button>
      </div>
      
      <% if (typeof chapters !== 'undefined' && chapters.length > 0) { %>
      <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-4 mb-4">
        <h2 class="text-xl font-semibold text-gray-800 dark:text-white mb-4">
          Chapters
        </h2>
        <div class="space-y-2">
          <% 
          // Sort chapters by extracting numbers
          const sortedChapters = chapters.sort((a, b) => {
            const aMatch = a.match(/(\d+)/);
            const bMatch = b.match(/(\d+)/);
            if (!aMatch || !bMatch) return a.localeCompare(b);
            return parseInt(aMatch[0], 10) - parseInt(bMatch[0], 10);
          });
          
          sortedChapters.forEach(chapter => {
            const chapterVideos = videosByChapter[chapter];
            const watchedCount = chapterVideos.filter(v => v.watched).length;
            const totalCount = chapterVideos.length;
            const isCompleted = watchedCount === totalCount;
          %>
          <details class="border border-gray-200 rounded-lg">
            <summary class="font-medium text-gray-700 dark:text-gray-300 p-3 cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-700 rounded-lg">
              <span class="flex items-center justify-between">
                <span>
                  <%= chapter %>
                  <% if (isCompleted) { %>
                    <i class="fas fa-check-circle text-green-500 ml-2"></i>
                  <% } %>
                </span>
                <span class="text-xs text-gray-500"><%= watchedCount %>/<%= totalCount %></span>
              </span>
            </summary>
            <div class="p-3 pt-0">
              <ul class="space-y-1">
                <% chapterVideos.forEach((chapterVideo, index) => { %>
                <li>
                  <a
                    href="/videos/<%= encodeURIComponent(courseName) %>/<%= chapterVideo._id %>"
                    class="block text-sm p-2 rounded <%= chapterVideo._id.toString() === video._id.toString() ? 'bg-indigo-100 text-indigo-600 font-medium' : 'text-gray-600 hover:text-indigo-600 hover:bg-gray-50' %>"
                  >
                    <%= (index + 1) %>. <%= chapterVideo.title %>
                    <% if (chapterVideo.watched) { %>
                      <i class="fas fa-check text-green-500 ml-1"></i>
                    <% } %>
                  </a>
                </li>
                <% }); %>
              </ul>
            </div>
          </details>
          <% }); %>
        </div>
      </div>      <% } %>

      <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-4 mb-4">
        <h2 class="text-xl font-semibold text-gray-800 dark:text-white mb-4">
          Keyboard Shortcuts
        </h2>
        <ul class="space-y-2 text-sm text-gray-600">
          <li class="flex justify-between">
            <span class="font-medium">F</span>
            <span>Toggle fullscreen</span>
          </li>
          <li class="flex justify-between">
            <span class="font-medium">J</span>
            <span>Rewind 15 seconds</span>
          </li>
          <li class="flex justify-between">
            <span class="font-medium">K</span>
            <span>Play/Pause</span>
          </li>
          <li class="flex justify-between">
            <span class="font-medium">L</span>
            <span>Forward 15 seconds</span>
          </li>
        </ul>
        <div class="mt-4">
          <a
            href="/course/<%= courseName %>"
            class="block py-2 px-4 bg-indigo-100 dark:bg-indigo-900 text-indigo-700 dark:text-indigo-300 rounded-lg text-center"
          >
            <i class="fas fa-arrow-left mr-2"></i> Back to Course
          </a>
        </div>
      </div>

      <% if (typeof pdfs !== 'undefined' && pdfs.length > 0) { %>
      <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-4">
        <h2 class="text-xl font-semibold text-gray-800 dark:text-white mb-4">
          <i class="fas fa-file-pdf text-red-500 mr-2"></i> PDF Resources
        </h2>
        <ul class="space-y-2">
          <% pdfs.forEach((pdf, index) => { %>
          <li>
            <a
              href="/pdf/<%= pdf.path %>"
              target="_blank"
              class="flex items-center py-2 px-3 rounded-lg hover:bg-gray-100 transition-colors"
            >
              <span
                class="flex-shrink-0 w-6 h-6 flex items-center justify-center bg-red-100 text-red-500 rounded-full mr-2"
              >
                <%= index + 1 %>
              </span>
              <span class="text-gray-700 dark:text-gray-300"
                ><%= pdf.name %></span
              >
            </a>
          </li>
          <% }); %>
        </ul>
      </div>
      <% } %>
    </div>
  </div>
</main>

<!-- Key hint element -->
<div id="keyHint" class="key-hint"></div>

<script src="/js/connection-monitor.js"></script>
<script src="/js/gamification.js"></script>
<script src="/js/quiz-system.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const videoPlayer = document.getElementById('videoPlayer');
    const markWatchedButton = document.getElementById('markWatchedButton');
    const forceSyncButton = document.getElementById('forceSyncButton');
    const prevButton = document.getElementById('prevButton');
    const nextButton = document.getElementById('nextButton');
    const keyHint = document.getElementById('keyHint');
    const quickQuizBtn = document.getElementById('quickQuizBtn');

    // Check if autoplay parameter is present in URL
    const urlParams = new URLSearchParams(window.location.search);
    const shouldAutoplay = urlParams.get('autoplay') === 'true';

    // Autoplay video if parameter is present
    if (shouldAutoplay && videoPlayer) {
      videoPlayer.play().catch(error => {
        console.warn('Autoplay was prevented by browser:', error);
      });
    }

    let videoId = '<%= video ? video._id : "" %>';
    let courseName = '<%= courseName %>';
    let isWatched = <%= video && video.watched ? 'true' : 'false' %>;
    let watchedBadge = document.querySelector('.watched-badge');

    // Function to show key hint
    function showKeyHint(text) {
      keyHint.textContent = text;
      keyHint.classList.add('visible');
      setTimeout(() => {
        keyHint.classList.remove('visible');
      }, 1000);
    }

    // Function to mark video as watched
    function markVideoAsWatched() {
      console.log(`Client: Marking video as watched: ${videoId} in course ${courseName}`);

      // Special handling for AWS course with special characters
      const encodedCourseName = courseName.includes('[') ?
        encodeURIComponent(courseName) : courseName;

      fetch(`/api/mark-watched`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          videoId: videoId,
          courseName: courseName
        })
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Failed to mark video as watched');
        }
        return response.json();
      })
      .then(data => {
        isWatched = true;
        watchedBadge.classList.remove('unwatched');
        watchedBadge.classList.add('watched');
        watchedBadge.innerHTML = '<i class="fas fa-check mr-1"></i> Watched';
        
        // Trigger gamification events
        if (window.gamificationSystem) {
          const isLastVideo = <%= isLastVideo ? 'true' : 'false' %>;
          const isLastInChapter = <%= isLastInChapter ? 'true' : 'false' %>;
          
          window.gamificationSystem.onVideoCompleted({
            videoId: videoId,
            courseName: courseName,
            isLastVideo: isLastVideo,
            isLastInChapter: isLastInChapter
          });
          
          window.gamificationSystem.incrementDailyVideoCount();
          
          // Sync with localStorage after marking as watched
          setTimeout(() => {
            window.gamificationSystem.syncWithLocalStorageVideos();
            // Reload watch dates for calendar if on profile page
            if (window.location.pathname === '/profile' && window.loadWatchDates) {
              window.loadWatchDates().then(() => {
                if (window.populateStreakCalendar) window.populateStreakCalendar();
              });
            }
          }, 500);
        }
      })
      .catch(error => {
        console.error('Error:', error);
      });
    }

    // Force sync button
    if (forceSyncButton) {
      forceSyncButton.addEventListener('click', function() {
        fetch(`/api/videos/${videoId}/sync`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        })
        .then(response => {
          if (!response.ok) {
            throw new Error('Failed to sync video status');
          }
          return response.json();
        })
        .then(data => {
          alert('Video status synced successfully!');
          location.reload();
        })
        .catch(error => {
          console.error('Error:', error);
          alert('Failed to sync video status. Please try again.');
        });
      });
    }

    // Mark as watched button
    if (markWatchedButton) {
      markWatchedButton.addEventListener('click', markVideoAsWatched);
    }

    // Function to navigate to next video
    function navigateToNextVideo() {
      const isLastVideo = <%= isLastVideo ? 'true' : 'false' %>;
      const nextVideoId = '<%= typeof nextVideoId !== "undefined" ? nextVideoId : "" %>';
      const isLastInChapter = <%= isLastInChapter ? 'true' : 'false' %>;

      if (!isLastVideo && nextVideoId) {
        const encodedCourseName = encodeURIComponent(courseName);
        
        // If this is the last video in a chapter, show a brief message
        if (isLastInChapter) {
          showKeyHint('Chapter Complete! Moving to next chapter...');
          setTimeout(() => {
            window.location.href = `/videos/${encodedCourseName}/${nextVideoId}?autoplay=true`;
          }, 1500);
        } else {
          window.location.href = `/videos/${encodedCourseName}/${nextVideoId}?autoplay=true`;
        }
      }
    }

    // Navigation buttons
    if (prevButton) {
      prevButton.addEventListener('click', function() {
        const encodedCourseName = encodeURIComponent(courseName);
        const prevId = '<%= typeof prevVideoId !== "undefined" ? prevVideoId : "" %>';
        window.location.href = `/videos/${encodedCourseName}/${prevId}`;
      });
    }

    if (nextButton) {
      nextButton.addEventListener('click', function() {
        const encodedCourseName = encodeURIComponent(courseName);
        const nextId = '<%= typeof nextVideoId !== "undefined" ? nextVideoId : "" %>';
        window.location.href = `/videos/${encodedCourseName}/${nextId}?autoplay=true`;
      });
    }

    // Video player keyboard shortcuts
    if (videoPlayer) {
      document.addEventListener('keydown', function(e) {
        // Only handle shortcuts if not typing in an input
        if (document.activeElement.tagName === 'INPUT' ||
            document.activeElement.tagName === 'TEXTAREA') {
          return;
        }

        switch(e.key.toLowerCase()) {
          case 'f':
            if (document.fullscreenElement) {
              document.exitFullscreen();
            } else {
              videoPlayer.requestFullscreen();
            }
            showKeyHint('Fullscreen');
            if (window.gamificationSystem) {
              window.gamificationSystem.onKeyboardShortcut('F - Fullscreen');
            }
            break;
          case 'j':
            videoPlayer.currentTime = Math.max(0, videoPlayer.currentTime - 15);
            showKeyHint('⏪ -15s');
            if (window.gamificationSystem) {
              window.gamificationSystem.onKeyboardShortcut('J - Rewind');
            }
            break;
          case 'k':
            if (videoPlayer.paused) {
              videoPlayer.play();
              showKeyHint('▶️ Play');
            } else {
              videoPlayer.pause();
              showKeyHint('⏸️ Pause');
            }
            if (window.gamificationSystem) {
              window.gamificationSystem.onKeyboardShortcut('K - Play/Pause');
            }
            break;
          case 'l':
            videoPlayer.currentTime = Math.min(videoPlayer.duration, videoPlayer.currentTime + 15);
            showKeyHint('⏩ +15s');
            if (window.gamificationSystem) {
              window.gamificationSystem.onKeyboardShortcut('L - Forward');
            }
            break;
        }
      });

      // Mark video as watched when it ends
      videoPlayer.addEventListener('ended', function() {
        markVideoAsWatched();
        
        // Trigger quiz opportunity (30% chance)
        if (Math.random() < 0.3 && window.quizSystem) {
          setTimeout(() => {
            if (confirm('🎯 Want to test what you learned? Take a quick quiz!')) {
              window.quizSystem.startQuiz('general');
            } else {
              navigateToNextVideo();
            }
          }, 1000);
        } else {
          // Always navigate to next video when current one ends
          setTimeout(() => {
            navigateToNextVideo();
          }, 500);
        }
      });

      // Mark video as watched when 90% is watched and trigger quiz
      let quizTriggered = false;
      videoPlayer.addEventListener('timeupdate', function() {
        if (videoPlayer.currentTime > videoPlayer.duration * 0.9) {
          markVideoAsWatched();
          
          // Trigger SRT-based quiz at 90%
          if (!quizTriggered && window.quizSystem) {
            quizTriggered = true;
            generateSRTQuiz();
          }
        }
      });
      
      // Generate quiz from SRT content or pre-generated
      async function generateSRTQuiz() {
        try {
          const response = await fetch(`/api/quiz/generate/${encodeURIComponent(courseName)}/${videoId}`);
          if (response.ok) {
            const data = await response.json();
            if (data.questions && data.questions.length > 0) {
              console.log(`Starting ${data.quizType} quiz for video: ${data.videoTitle}`);
              window.quizSystem.startQuiz(data.quizType || 'video', data.questions);
            } else {
              console.warn('No quiz questions available for this video');
            }
          } else {
            console.error('Failed to fetch quiz:', response.statusText);
          }
        } catch (error) {
          console.error('Failed to generate quiz:', error);
          // Fallback to general quiz
          if (window.quizSystem) {
            window.quizSystem.startQuiz('general');
          }
        }
      }
      
      // Quick quiz button handler
      if (quickQuizBtn) {
        quickQuizBtn.addEventListener('click', async function() {
          console.log('Quiz button clicked');
          
          if (!window.quizSystem) {
            console.error('Quiz system not loaded');
            alert('Quiz system is not available. Please refresh the page.');
            return;
          }
          
          console.log('Quiz system available, generating quiz...');
          
          // Determine quiz type based on course content
          let quizType = 'general';
          const courseNameLower = courseName.toLowerCase();
          const videoTitle = '<%= video ? video.title.toLowerCase() : "" %>';
          
          if (courseNameLower.includes('davinci') || courseNameLower.includes('video') || 
              videoTitle.includes('davinci') || videoTitle.includes('resolve') || 
              videoTitle.includes('editing') || videoTitle.includes('color')) {
            quizType = 'video_editing';
          } else if (courseNameLower.includes('aws') || videoTitle.includes('aws')) {
            quizType = 'aws';
          } else if (courseNameLower.includes('devops') || videoTitle.includes('devops')) {
            quizType = 'devops';
          } else if (videoTitle.includes('programming') || videoTitle.includes('code')) {
            quizType = 'programming';
          }
          
          console.log(`Determined quiz type: ${quizType}`);
          
          try {
            // Try to get video-specific quiz first
            const quizUrl = `/api/quiz/generate/${encodeURIComponent(courseName)}/${videoId}`;
            console.log('Fetching quiz from:', quizUrl);
            
            const response = await fetch(quizUrl);
            console.log('Quiz API response status:', response.status);
            
            if (response.ok) {
              const data = await response.json();
              console.log('Quiz data received:', data);
              
              if (data.questions && data.questions.length > 0) {
                console.log(`Starting ${data.quizType} quiz with ${data.questions.length} questions`);
                window.quizSystem.startQuiz(data.quizType || 'video', data.questions);
                return;
              } else {
                console.warn('No questions in quiz data');
              }
            } else {
              console.error('Quiz API failed with status:', response.status);
            }
          } catch (error) {
            console.warn('Failed to get video-specific quiz:', error);
          }
          
          // Fallback to determined quiz type
          console.log(`Using fallback ${quizType} quiz`);
          window.quizSystem.startQuiz(quizType);
        });
      }
    }
  });
</script>

<%- include('partials/footer') %>
