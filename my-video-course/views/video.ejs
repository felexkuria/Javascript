<%- include('partials/header', { 
  title: `${video ? video.title : 'Video'} - ${courseName}`,
  extraStyles: `
    <style>
      .video-container {
        position: relative;
        padding-bottom: 56.25%; /* 16:9 aspect ratio */
        height: 0;
        overflow: hidden;
      }
      .video-container video {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
      }
      .watched-badge {
        display: inline-flex;
        align-items: center;
        padding: 0.25rem 0.5rem;
        border-radius: 9999px;
        font-size: 0.75rem;
        font-weight: 500;
        margin-left: 0.5rem;
      }
      .watched-badge.watched {
        background-color: rgba(16, 185, 129, 0.1);
        color: rgb(16, 185, 129);
      }
      .watched-badge.unwatched {
        background-color: rgba(239, 68, 68, 0.1);
        color: rgb(239, 68, 68);
      }
      .key-hint {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: rgba(0, 0, 0, 0.7);
        color: white;
        padding: 1rem;
        border-radius: 0.5rem;
        font-size: 1.5rem;
        font-weight: bold;
        z-index: 50;
        opacity: 0;
        transition: opacity 0.3s ease;
      }
      .key-hint.visible {
        opacity: 1;
      }
      #confetti-canvas {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 100;
        pointer-events: none;
      }
      .celebration-modal {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: white;
        border-radius: 1rem;
        padding: 2rem;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        z-index: 101;
        text-align: center;
        max-width: 90%;
        width: 500px;
      }
      .celebration-modal h2 {
        font-size: 2rem;
        margin-bottom: 1rem;
        color: #4f46e5;
      }
      .celebration-modal p {
        font-size: 1.2rem;
        margin-bottom: 2rem;
        color: #4b5563;
      }
      .celebration-modal button {
        padding: 0.75rem 1.5rem;
        background-color: #4f46e5;
        color: white;
        border-radius: 0.5rem;
        font-weight: 600;
        transition: background-color 0.2s;
      }
      .celebration-modal button:hover {
        background-color: #4338ca;
      }
    </style>
  `
}) %>

<!-- Main Content -->
<main class="flex-grow overflow-y-auto px-4 py-8 md:px-8">
  <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
    <div class="lg:col-span-3">
      <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden">
        <div class="p-6">
          <div class="mb-4">
            <div class="flex items-center justify-between">
              <div class="flex items-center">
                <h1 class="text-2xl font-bold text-gray-800 dark:text-white">
                  <%= video ? video.title : 'Video Not Found' %>
                </h1>
                <% if (video && video.watched) { %>
                  <span class="watched-badge watched">
                    <i class="fas fa-check mr-1"></i> Watched
                  </span>
                <% } else { %>
                  <span class="watched-badge unwatched">
                    <i class="fas fa-times mr-1"></i> Unwatched
                  </span>
                <% } %>
              </div>
              <button id="forceSyncButton" class="text-xs px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors">
                <i class="fas fa-sync-alt mr-1"></i> Force Sync
              </button>
            </div>
            <p class="text-gray-600 dark:text-gray-400 mt-2">
              <%= video ? video.description : 'No description available' %>
            </p>
          </div>
          
          <div class="video-content-container">
            <% if (video && video.videoUrl) { %>
              <div class="video-container mb-4">
                <video id="videoPlayer" controls class="w-full">
                  <source src="/videos/<%= courseName %>/file/<%= video._id %>" type="video/mp4">
                  Your browser does not support the video tag.
                </video>
              </div>
              
              <div class="flex justify-between items-center mb-4">
                <div class="flex space-x-2">
                  <% if (!isFirstVideo) { %>
                    <button id="prevButton" class="px-3 py-1 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors">
                      <i class="fas fa-step-backward mr-1"></i> Previous
                    </button>
                  <% } %>
                  
                  <% if (!isLastVideo) { %>
                    <button id="nextButton" class="px-3 py-1 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors">
                      Next <i class="fas fa-step-forward ml-1"></i>
                    </button>
                  <% } %>
                </div>
                
                <div class="flex items-center">
                  <span class="text-sm text-gray-600 dark:text-gray-400 mr-2">
                    <%= watchedVideos %>/<%= totalVideos %> videos (<%= watchedPercent %>%)
                  </span>
                  <div class="w-32 h-2 bg-gray-200 dark:bg-gray-700 rounded-full overflow-hidden">
                    <div class="h-full bg-green-500" style="width: <%= watchedPercent %>%"></div>
                  </div>
                </div>
              </div>
              
              <div class="flex justify-between items-center">
                <button id="markWatchedButton" class="px-4 py-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors">
                  <i class="fas fa-check mr-1"></i> Mark as Watched
                </button>
                
                <a href="/course/<%= courseName %>" class="px-4 py-2 bg-indigo-500 text-white rounded hover:bg-indigo-600 transition-colors">
                  <i class="fas fa-arrow-left mr-1"></i> Back to Course
                </a>
              </div>
            <% } else { %>
              <div class="text-center p-8 bg-red-50 dark:bg-red-900 text-red-700 dark:text-red-300 rounded-xl">
                <i class="fas fa-exclamation-triangle text-4xl mb-4"></i>
                <h2 class="text-xl font-bold mb-2">Video Not Found</h2>
                <p>The requested video could not be found or is not available.</p>
                <a href="/course/<%= courseName %>" class="inline-block mt-4 px-4 py-2 bg-indigo-500 text-white rounded hover:bg-indigo-600 transition-colors">
                  <i class="fas fa-arrow-left mr-1"></i> Back to Course
                </a>
              </div>
            <% } %>
          </div>
        </div>
      </div>
    </div>
    
    <div class="lg:col-span-1">
      <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-4 mb-4">
        <h2 class="text-xl font-semibold text-gray-800 dark:text-white mb-4">Keyboard Shortcuts</h2>
        <ul class="space-y-2 text-sm text-gray-600">
          <li class="flex justify-between">
            <span class="font-medium">F</span>
            <span>Toggle fullscreen</span>
          </li>
          <li class="flex justify-between">
            <span class="font-medium">J</span>
            <span>Rewind 15 seconds</span>
          </li>
          <li class="flex justify-between">
            <span class="font-medium">K</span>
            <span>Play/Pause</span>
          </li>
          <li class="flex justify-between">
            <span class="font-medium">L</span>
            <span>Forward 15 seconds</span>
          </li>
        </ul>
        <div class="mt-4">
          <a href="/course/<%= courseName %>" class="block py-2 px-4 bg-indigo-100 dark:bg-indigo-900 text-indigo-700 dark:text-indigo-300 rounded-lg text-center">
            <i class="fas fa-arrow-left mr-2"></i> Back to Course
          </a>
        </div>
      </div>
      
      <% if (typeof pdfs !== 'undefined' && pdfs.length > 0) { %>
      <div class="bg-white dark:bg-gray-800 rounded-xl shadow-lg p-4">
        <h2 class="text-xl font-semibold text-gray-800 dark:text-white mb-4">
          <i class="fas fa-file-pdf text-red-500 mr-2"></i> PDF Resources
        </h2>
        <ul class="space-y-2">
          <% pdfs.forEach((pdf, index) => { %>
            <li>
              <a href="/pdf/<%= pdf.path %>" target="_blank" 
                 class="flex items-center py-2 px-3 rounded-lg hover:bg-gray-100 transition-colors">
                <span class="flex-shrink-0 w-6 h-6 flex items-center justify-center bg-red-100 text-red-500 rounded-full mr-2">
                  <%= index + 1 %>
                </span>
                <span class="text-sm text-gray-700 truncate flex-grow">
                  <%= pdf.name %>
                </span>
                <i class="fas fa-paperclip text-gray-400"></i>
              </a>
            </li>
          <% }); %>
        </ul>
      </div>
      <% } %>
    </div>
  </div>
</main>

<!-- Key hint element -->
<div id="keyHint" class="key-hint"></div>

<!-- Confetti canvas -->
<canvas id="confetti-canvas"></canvas>

<!-- Celebration modal -->
<div id="celebration-modal" class="celebration-modal hidden">
  <h2>ðŸŽ‰ Congratulations! ðŸŽ‰</h2>
  <p>You've completed the course! Great job on your learning journey.</p>
  <button id="back-to-course-btn">Back to Course</button>
</div>

<script src="/js/confetti.min.js"></script>
<script>
document.addEventListener("DOMContentLoaded", () => {
  // Add force sync button handler
  const forceSyncButton = document.getElementById('forceSyncButton');
  if (forceSyncButton) {
    forceSyncButton.addEventListener('click', async () => {
      try {
        forceSyncButton.disabled = true;
        forceSyncButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i> Syncing...';
        
        const response = await fetch('/api/force-sync-video', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            courseName: "<%= courseName %>",
            videoTitle: "<%= video ? video.title : '' %>"
          })
        });
        
        const result = await response.json();
        
        if (result.success) {
          // Show success message
          const messageDiv = document.createElement('div');
          messageDiv.className = 'bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mt-4';
          messageDiv.textContent = 'Video synced successfully!';
          document.querySelector('.video-content-container').appendChild(messageDiv);
          
          // Reload the page after 1.5 seconds
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          // Show error message
          const messageDiv = document.createElement('div');
          messageDiv.className = 'bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mt-4';
          messageDiv.textContent = 'Sync failed: ' + (result.error || 'Unknown error');
          document.querySelector('.video-content-container').appendChild(messageDiv);
          
          // Remove message after 5 seconds
          setTimeout(() => {
            if (document.body.contains(messageDiv)) {
              document.body.removeChild(messageDiv);
            }
          }, 5000);
        }
      } catch (err) {
        console.error('Error force syncing video:', err);
        
        // Show error message
        const messageDiv = document.createElement('div');
        messageDiv.className = 'bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mt-4';
        messageDiv.textContent = 'Error syncing video: ' + err.message;
        document.querySelector('.video-content-container').appendChild(messageDiv);
        
        // Remove message after 5 seconds
        setTimeout(() => {
          if (document.body.contains(messageDiv)) {
            document.body.removeChild(messageDiv);
          }
        }, 5000);
      } finally {
        forceSyncButton.disabled = false;
        forceSyncButton.innerHTML = '<i class="fas fa-sync-alt mr-1"></i> Force Sync';
      }
    });
  }
  
  // Initialize connection monitor
  const connectionMonitor = new ConnectionMonitor({
    checkInterval: 30000, // Check every 30 seconds
    onOnline: async () => {
      console.log('Connection restored! Syncing data...');
      // Show reconnection message
      const statusDiv = document.createElement('div');
      statusDiv.className = 'fixed bottom-4 right-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded';
      statusDiv.textContent = 'Connection restored! Syncing data...';
      document.body.appendChild(statusDiv);
      
      try {
        // Attempt to sync data
        const response = await fetch('/api/sync', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        
        const result = await response.json();
        
        if (result.success) {
          statusDiv.textContent = 'Data synced successfully!';
          setTimeout(() => {
            if (document.body.contains(statusDiv)) {
              document.body.removeChild(statusDiv);
            }
          }, 3000);
        } else {
          statusDiv.textContent = result.message || 'Sync completed with some issues';
          setTimeout(() => {
            if (document.body.contains(statusDiv)) {
              document.body.removeChild(statusDiv);
            }
          }, 5000);
        }
      } catch (err) {
        console.error('Error syncing after reconnection:', err);
        statusDiv.textContent = 'Error syncing data';
        setTimeout(() => {
          if (document.body.contains(statusDiv)) {
            document.body.removeChild(statusDiv);
          }
        }, 5000);
      }
    },
    onOffline: () => {
      console.log('Connection lost! Running in offline mode.');
      // Show offline message if not already shown
      if (!document.querySelector('#offline-indicator')) {
        const offlineDiv = document.createElement('div');
        offlineDiv.id = 'offline-indicator';
        offlineDiv.className = 'fixed top-4 right-4 bg-amber-100 border border-amber-400 text-amber-700 px-4 py-3 rounded';
        offlineDiv.textContent = 'You are offline. Your progress will be saved locally.';
        document.body.appendChild(offlineDiv);
      }
    }
  }).start();

  const videoPlayer = document.getElementById('videoPlayer');
  const markWatchedButton = document.getElementById('markWatchedButton');
  const prevButton = document.getElementById('prevButton');
  const nextButton = document.getElementById('nextButton');
  const keyHint = document.getElementById('keyHint');
  
  if (videoPlayer) {
    // Video player keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      if (document.activeElement.tagName === 'INPUT' || 
          document.activeElement.tagName === 'TEXTAREA') {
        return;
      }
      
      switch (e.key.toLowerCase()) {
        case 'f':
          if (document.fullscreenElement) {
            document.exitFullscreen();
          } else {
            videoPlayer.requestFullscreen();
          }
          showKeyHint('Fullscreen');
          break;
        case 'k':
          if (videoPlayer.paused) {
            videoPlayer.play();
            showKeyHint('Play');
          } else {
            videoPlayer.pause();
            showKeyHint('Pause');
          }
          break;
        case 'j':
          videoPlayer.currentTime = Math.max(0, videoPlayer.currentTime - 15);
          showKeyHint('Rewind 15s');
          break;
        case 'l':
          videoPlayer.currentTime = Math.min(videoPlayer.duration, videoPlayer.currentTime + 15);
          showKeyHint('Forward 15s');
          break;
      }
    });
    
    // Mark video as watched when it ends and navigate to next video
    videoPlayer.addEventListener('ended', () => {
      markVideoAsWatched();
      
      // Check if this is the last video
      if (<%= isLastVideo %>) {
        showCelebration();
      } else {
        // Navigate to next video after a short delay
        setTimeout(() => {
          navigateToAdjacentVideo('next');
        }, 1500);
      }
    });
    
    // Mark video as watched when button is clicked
    if (markWatchedButton) {
      markWatchedButton.addEventListener('click', () => {
        markVideoAsWatched();
      });
    }
    
    // Previous and next video buttons
    if (prevButton) {
      prevButton.addEventListener('click', () => {
        navigateToAdjacentVideo('prev');
      });
    }
    
    if (nextButton) {
      nextButton.addEventListener('click', () => {
        navigateToAdjacentVideo('next');
      });
    }
  }
  
  function showKeyHint(text) {
    keyHint.textContent = text;
    keyHint.classList.add('visible');
    
    setTimeout(() => {
      keyHint.classList.remove('visible');
    }, 1000);
  }
  
  async function markVideoAsWatched() {
    try {
      const response = await fetch('/api/mark-watched', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          videoId: '<%= video ? video._id : "" %>',
          courseName: '<%= courseName %>'
        })
      });
      
      if (response.ok) {
        // Update UI to show video is watched
        const watchedBadge = document.querySelector('.watched-badge');
        if (watchedBadge) {
          watchedBadge.className = 'watched-badge watched';
          watchedBadge.innerHTML = '<i class="fas fa-check mr-1"></i> Watched';
        }
        
        // Disable the mark as watched button
        if (markWatchedButton) {
          markWatchedButton.disabled = true;
          markWatchedButton.classList.add('bg-gray-400');
          markWatchedButton.classList.remove('bg-green-500', 'hover:bg-green-600');
          markWatchedButton.innerHTML = '<i class="fas fa-check mr-1"></i> Watched';
        }
        
        showKeyHint('Marked as Watched');
      } else {
        console.error('Failed to mark video as watched');
        showKeyHint('Error');
      }
    } catch (err) {
      console.error('Error marking video as watched:', err);
      showKeyHint('Error');
    }
  }
  
  async function navigateToAdjacentVideo(direction) {
    try {
      const response = await fetch(`/api/next-video?currentVideoId=<%= video ? video._id : "" %>&courseName=<%= courseName %>&direction=${direction}`);
      
      if (response.ok) {
        const data = await response.json();
        window.location.href = `/videos/<%= courseName %>/${data._id}`;
      } else {
        console.error(`No ${direction === 'prev' ? 'previous' : 'next'} video available`);
      }
    } catch (err) {
      console.error(`Error navigating to ${direction === 'prev' ? 'previous' : 'next'} video:`, err);
    }
  }
});
</script>

<%- include('partials/footer') %>