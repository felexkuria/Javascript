<%- include('partials/header', { 
  title: 'Learning Progress', 
  extraStyles: `
    <link rel="stylesheet" href="/css/gamification.css">
  `
}) %>

<!-- Main Content -->
<main class="flex-grow overflow-y-auto px-4 py-8 md:px-8">
  <div class="max-w-6xl mx-auto">
    <div class="flex items-center justify-between mb-8">
      <div>
        <h1 class="text-4xl font-bold text-gray-800 mb-2">Learning Progress</h1>
        <p class="text-gray-600">Track your achievements and learning journey</p>
      </div>
      <div class="flex items-center gap-4">
        <div class="level-badge">
          <span class="user-level">1</span>
        </div>
        <div class="streak-counter">
          <span class="streak-flame">üî•</span>
          <span class="user-streak">0</span> day streak
        </div>
      </div>
    </div>

    <!-- Stats Dashboard -->
    <div class="stats-dashboard">
      <div class="stat-card">
        <span class="stat-icon">üèÜ</span>
        <div class="stat-value user-points">0</div>
        <div class="stat-label">Total Points</div>
      </div>
      <div class="stat-card">
        <span class="stat-icon">üì∫</span>
        <div class="stat-value" id="videos-watched">0</div>
        <div class="stat-label">Videos Watched</div>
      </div>
      <div class="stat-card">
        <span class="stat-icon">üìö</span>
        <div class="stat-value" id="courses-completed">0</div>
        <div class="stat-label">Courses Completed</div>
      </div>
      <div class="stat-card">
        <span class="stat-icon">üéØ</span>
        <div class="stat-value" id="achievements-earned">0</div>
        <div class="stat-label">Achievements</div>
      </div>
    </div>

    <!-- Level Progress -->
    <div class="bg-white rounded-xl shadow-lg p-6 mb-8">
      <div class="flex items-center justify-between mb-4">
        <h2 class="text-2xl font-semibold text-gray-800">Level Progress</h2>
        <span class="text-sm text-gray-600">Level <span class="user-level">1</span></span>
      </div>
      <div class="animated-progress mb-2">
        <div class="animated-progress-fill" id="level-progress" style="width: 0%"></div>
      </div>
      <div class="flex justify-between text-sm text-gray-600">
        <span id="current-xp">0 XP</span>
        <span id="next-level-xp">100 XP</span>
      </div>
    </div>

    <!-- Achievements Section -->
    <div class="bg-white rounded-xl shadow-lg p-6 mb-8">
      <h2 class="text-2xl font-semibold text-gray-800 mb-6">Achievements</h2>
      <div class="achievements-grid" id="achievements-container">
        <!-- Achievements will be populated by JavaScript -->
      </div>
    </div>

    <!-- Learning Streak Calendar -->
    <div class="bg-white rounded-xl shadow-lg p-6">
      <div class="flex items-center justify-between mb-6">
        <h2 class="text-2xl font-semibold text-gray-800">Learning Streak</h2>
        <div class="flex items-center gap-2">
          <button id="prev-month" class="p-2 hover:bg-gray-100 rounded-lg transition-colors">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
          </button>
          <span id="calendar-month" class="font-medium text-gray-700 min-w-[120px] text-center"></span>
          <button id="next-month" class="p-2 hover:bg-gray-100 rounded-lg transition-colors">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
            </svg>
          </button>
        </div>
      </div>
      <div class="grid grid-cols-7 gap-2 mb-4">
        <div class="text-center text-sm font-medium text-gray-600 py-2">Sun</div>
        <div class="text-center text-sm font-medium text-gray-600 py-2">Mon</div>
        <div class="text-center text-sm font-medium text-gray-600 py-2">Tue</div>
        <div class="text-center text-sm font-medium text-gray-600 py-2">Wed</div>
        <div class="text-center text-sm font-medium text-gray-600 py-2">Thu</div>
        <div class="text-center text-sm font-medium text-gray-600 py-2">Fri</div>
        <div class="text-center text-sm font-medium text-gray-600 py-2">Sat</div>
      </div>
      <div class="grid grid-cols-7 gap-2" id="streak-calendar">
        <!-- Calendar will be populated by JavaScript -->
      </div>
      <div class="mt-4 flex items-center justify-between text-sm text-gray-600">
        <span>Current Streak: <strong class="user-streak">0</strong> days</span>
        <span>Longest Streak: <strong id="longest-streak">0</strong> days</span>
      </div>
    </div>
  </div>
</main>

<script src="/js/gamification.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Wait for gamification system to initialize
  let retryCount = 0;
  const maxRetries = 10;
  
  function tryUpdateProfile() {
    if (window.gamificationSystem) {
      updateProfileDisplay();
    } else if (retryCount < maxRetries) {
      retryCount++;
      setTimeout(tryUpdateProfile, 500);
    } else {
      console.error('Gamification system failed to load after', maxRetries, 'attempts');
      // Show fallback data
      showFallbackData();
    }
  }
  
  function showFallbackData() {
    const elements = {
      'videos-watched': '0',
      'courses-completed': '0', 
      'achievements-earned': '0/8',
      'current-xp': '0 XP',
      'next-level-xp': '100 XP',
      'longest-streak': '0'
    };
    
    Object.entries(elements).forEach(([id, value]) => {
      const el = document.getElementById(id);
      if (el) el.textContent = value;
    });
  }
  
  tryUpdateProfile();
  
  function updateProfileDisplay() {
    if (!window.gamificationSystem) {
      console.warn('Gamification system not loaded yet');
      return;
    }
    
    const progress = window.gamificationSystem.getProgressSummary();
    
    // Update stats with null checks
    const videosWatchedEl = document.getElementById('videos-watched');
    const coursesCompletedEl = document.getElementById('courses-completed');
    const achievementsEarnedEl = document.getElementById('achievements-earned');
    
    if (videosWatchedEl) videosWatchedEl.textContent = progress.videosWatched || 0;
    if (coursesCompletedEl) coursesCompletedEl.textContent = progress.coursesCompleted || 0;
    if (achievementsEarnedEl) achievementsEarnedEl.textContent = `${progress.achievements || 0}/${progress.totalAchievements || 0}`;
    
    // Update level progress
    const xpForNextLevel = (progress.level || 1) * 100;
    const currentXP = window.gamificationSystem.userStats?.experiencePoints || 0;
    const progressPercent = (currentXP / xpForNextLevel) * 100;
    
    const levelProgressEl = document.getElementById('level-progress');
    const currentXpEl = document.getElementById('current-xp');
    const nextLevelXpEl = document.getElementById('next-level-xp');
    const longestStreakEl = document.getElementById('longest-streak');
    
    if (levelProgressEl) levelProgressEl.style.width = `${progressPercent}%`;
    if (currentXpEl) currentXpEl.textContent = `${currentXP} XP`;
    if (nextLevelXpEl) nextLevelXpEl.textContent = `${xpForNextLevel} XP`;
    if (longestStreakEl) longestStreakEl.textContent = progress.longestStreak || 0;
    
    // Populate achievements
    populateAchievements();
    
    // Populate streak calendar
    populateStreakCalendar();
  }
  
  function populateAchievements() {
    const container = document.getElementById('achievements-container');
    if (!container || !window.gamificationSystem) return;
    
    const definitions = window.gamificationSystem.getAchievementDefinitions();
    const earned = window.gamificationSystem.achievements || [];
    
    container.innerHTML = '';
    
    Object.values(definitions).forEach(achievement => {
      const isEarned = earned.includes(achievement.id);
      const card = document.createElement('div');
      card.className = `achievement-card ${isEarned ? 'earned' : 'locked'}`;
      
      card.innerHTML = `
        <span class="achievement-card-icon">${achievement.icon}</span>
        <div class="achievement-card-name">${achievement.name}</div>
        <div class="achievement-card-description">${achievement.description}</div>
        <div class="achievement-card-points">${achievement.points} points</div>
      `;
      
      container.appendChild(card);
    });
  }
  
  let currentCalendarDate = new Date();
  
  function populateStreakCalendar() {
    const calendar = document.getElementById('streak-calendar');
    const monthLabel = document.getElementById('calendar-month');
    
    if (!calendar || !monthLabel || !window.gamificationSystem) return;
    
    const streakDates = window.gamificationSystem.streakData?.streakDates || [];
    
    // Set month label
    monthLabel.textContent = currentCalendarDate.toLocaleDateString('en-US', { 
      month: 'long', 
      year: 'numeric' 
    });
    
    // Get first day of month and number of days
    const firstDay = new Date(currentCalendarDate.getFullYear(), currentCalendarDate.getMonth(), 1);
    const lastDay = new Date(currentCalendarDate.getFullYear(), currentCalendarDate.getMonth() + 1, 0);
    const startDate = new Date(firstDay);
    startDate.setDate(startDate.getDate() - firstDay.getDay()); // Start from Sunday
    
    calendar.innerHTML = '';
    
    // Generate 42 days (6 weeks)
    for (let i = 0; i < 42; i++) {
      const date = new Date(startDate);
      date.setDate(startDate.getDate() + i);
      
      const dateString = date.toISOString().split('T')[0];
      const hasActivity = streakDates.includes(dateString);
      const isCurrentMonth = date.getMonth() === currentCalendarDate.getMonth();
      const isToday = dateString === new Date().toISOString().split('T')[0];
      
      const dayElement = document.createElement('div');
      dayElement.className = `w-8 h-8 rounded-sm flex items-center justify-center text-xs transition-colors ${
        hasActivity 
          ? 'bg-green-500 text-white' 
          : isCurrentMonth 
            ? 'bg-gray-100 text-gray-700 hover:bg-gray-200' 
            : 'bg-gray-50 text-gray-400'
      } ${
        isToday ? 'ring-2 ring-blue-500' : ''
      }`;
      dayElement.textContent = date.getDate();
      
      if (hasActivity) {
        dayElement.title = `Learning activity on ${date.toLocaleDateString()}`;
      }
      
      calendar.appendChild(dayElement);
    }
  }
  
  // Calendar navigation
  document.getElementById('prev-month').addEventListener('click', () => {
    currentCalendarDate.setMonth(currentCalendarDate.getMonth() - 1);
    populateStreakCalendar();
  });
  
  document.getElementById('next-month').addEventListener('click', () => {
    currentCalendarDate.setMonth(currentCalendarDate.getMonth() + 1);
    populateStreakCalendar();
  });
});
</script>

<%- include('partials/footer') %>