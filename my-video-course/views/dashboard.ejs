<%- include('partials/header', { 
  title: 'Video Dashboard',
  extraStyles: `<link rel="stylesheet" href="/css/gamification.css">`
}) %>

<!-- Main Content -->
<main class="flex-grow overflow-y-auto px-4 py-8 md:px-8">
  <div class="flex justify-between items-center mb-8">
    <div>
      <h1 class="text-4xl font-bold text-gray-800">
        Available Courses
      </h1>
      <% if (typeof offlineMode !== 'undefined' && offlineMode) { %>
        <div class="mt-2 flex items-center text-sm text-amber-600">
          <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
          </svg>
          <span>Offline Mode - Your progress is saved locally</span>
        </div>
      <% } %>
    </div>
    <div class="flex items-center gap-4">
      <!-- Gamification Stats -->
      <div class="flex items-center gap-4 bg-white rounded-lg px-4 py-2 shadow-md">
        <div class="flex items-center gap-2">
          <div class="level-badge" style="width: 35px; height: 35px; font-size: 0.9rem;">
            <span class="user-level">1</span>
          </div>
          <span class="text-sm font-medium text-gray-600">Level</span>
        </div>
        <div class="flex items-center gap-2">
          <span class="text-lg">üèÜ</span>
          <span class="font-bold user-points text-gray-800">0</span>
          <span class="text-sm text-gray-600">pts</span>
        </div>
        <div class="flex items-center gap-2">
          <span class="text-lg">üî•</span>
          <span class="font-bold user-streak text-gray-800">0</span>
          <span class="text-sm text-gray-600">day streak</span>
        </div>
      </div>
      <button id="syncButton" class="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors flex items-center">
        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
        </svg>
        Sync with Database
      </button>
    </div>
  </div>

  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
    <% if (courses && courses.length > 0) { %>
      <% courses.forEach(course => { %>
        <div class="group bg-white rounded-xl shadow-lg overflow-hidden transform hover:-translate-y-1 transition-all duration-300">
          <div class="relative">
            <img
              src="https://uploads.teachablecdn.com/attachments/e2FDxVHOSIKe60ZmL6ki_Teachable+Course+Thumbnail.png"
              alt="<%= course.name %>"
              class="w-full h-48 object-cover group-hover:scale-105 transition-transform duration-300"
            />
            <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-10 transition-all duration-300"></div>
          </div>
          <div class="p-6">
            <h2 class="text-xl font-semibold text-gray-800 mb-3 truncate" title="<%= course.name %>">
              <%= course.name %>
            </h2>
            <p class="course-description text-gray-600 mb-3 text-sm leading-relaxed" style="height: 60px; overflow: hidden;">
              Loading course description...
            </p>
            
            <% if (course.videos && course.videos.length > 0) { %>
              <% 
                // Sort videos by lesson number for consistent calculation
                const sortedVideos = [...course.videos].sort((a, b) => {
                  const aNum = parseInt(a.title.match(/\d+/)) || 0;
                  const bNum = parseInt(b.title.match(/\d+/)) || 0;
                  return aNum - bNum;
                });
                const totalVideos = sortedVideos.length;
                const watchedVideos = sortedVideos.filter(v => v.watched).length;
                const watchedPercent = totalVideos > 0 ? Math.round((watchedVideos / totalVideos) * 100) : 0;
              %>
              <div class="mb-4">
                <div class="flex justify-between items-center mb-1">
                  <span class="text-xs font-medium text-gray-500">Progress</span>
                  <span class="text-xs font-medium text-gray-500"><%= watchedVideos %>/<%= totalVideos %> (<%= watchedPercent %>%)</span>
                </div>
                <div class="h-1.5 bg-gray-200 rounded-full overflow-hidden">
                  <div class="h-full bg-green-500" style="width: <%= watchedPercent %>%"></div>
                </div>
              </div>
            <% } %>
            
            <a
              href="/course/<%= course.name %>"
              class="inline-flex items-center px-4 py-2 bg-indigo-500 text-white font-medium rounded-lg hover:bg-indigo-600 transition-colors duration-200"
            >
              <span>Start Learning</span>
              <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </a>
          </div>
        </div>
      <% }); %>
    <% } else { %>
      <div class="col-span-full text-center p-8 bg-gray-50 rounded-xl">
        <h3 class="text-xl font-medium text-gray-700 mb-2">No courses found</h3>
        <p class="text-gray-500">Add videos to the public/videos directory to get started.</p>
      </div>
    <% } %>
  </div>
</main>

<script src="/js/connection-monitor.js"></script>
<script src="/js/gamification.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Load AI-generated course descriptions
    const courseCards = document.querySelectorAll('.course-description');
    courseCards.forEach((desc, index) => {
      const courseName = desc.closest('.group').querySelector('h2').textContent.trim();
      fetch(`/api/course/description/${encodeURIComponent(courseName)}`)
        .then(response => response.json())
        .then(data => {
          if (data.description) {
            desc.textContent = data.description;
          } else {
            desc.textContent = `Comprehensive training course covering ${courseName} concepts and practical applications.`;
          }
        })
        .catch(error => {
          console.warn('Failed to load description for', courseName);
          desc.textContent = `Learn ${courseName} through hands-on exercises and practical examples.`;
        });
    });
    
    // Initialize connection monitor after 2 hours
    setTimeout(() => {
      const connectionMonitor = new ConnectionMonitor({
        checkInterval: 30000, // Check every 30 seconds
        onOnline: async () => {
          console.log('Connection restored! Syncing data...');
          // Show reconnection message
          const statusDiv = document.createElement('div');
          statusDiv.className = 'fixed bottom-4 right-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded';
          statusDiv.textContent = 'Connection restored! Syncing data...';
          document.body.appendChild(statusDiv);
        
        try {
          // Attempt to sync data
          const response = await fetch('/api/sync', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            }
          });
          
          const result = await response.json();
          
          if (result.success) {
            statusDiv.textContent = 'Data synced successfully!';
            setTimeout(() => {
              window.location.reload();
            }, 1500);
          } else {
            statusDiv.textContent = result.message || 'Sync completed with some issues';
            setTimeout(() => {
              if (document.body.contains(statusDiv)) {
                document.body.removeChild(statusDiv);
              }
            }, 5000);
          }
        } catch (err) {
          console.error('Error syncing after reconnection:', err);
          statusDiv.textContent = 'Error syncing data';
          setTimeout(() => {
            if (document.body.contains(statusDiv)) {
              document.body.removeChild(statusDiv);
            }
          }, 5000);
        }
      },
      onOffline: () => {
        console.log('Connection lost! Running in offline mode.');
        // Show offline message if not already shown
        if (!document.querySelector('#offline-indicator')) {
          const offlineDiv = document.createElement('div');
          offlineDiv.id = 'offline-indicator';
          offlineDiv.className = 'fixed top-4 right-4 bg-amber-100 border border-amber-400 text-amber-700 px-4 py-3 rounded';
          offlineDiv.textContent = 'You are offline. Your progress will be saved locally.';
          document.body.appendChild(offlineDiv);
        }
      }).start();
    }, 2 * 60 * 60 * 1000); // 2 hours in milliseconds
    
    const syncButton = document.getElementById('syncButton');
    
    if (syncButton) {
      syncButton.addEventListener('click', async () => {
        syncButton.disabled = true;
        syncButton.innerHTML = '<svg class="w-5 h-5 animate-spin mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> Syncing...';
        
        // Add status message
        const statusDiv = document.createElement('div');
        statusDiv.className = 'fixed bottom-4 right-4 bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded';
        statusDiv.id = 'syncStatus';
        statusDiv.textContent = 'Attempting to connect to database...';
        document.body.appendChild(statusDiv);
        
        try {
          // Set a timeout for the request
          const controller = new AbortController();
          const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout
          
          const response = await fetch('/api/sync', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            signal: controller.signal
          });
          
          clearTimeout(timeoutId);
          
          const result = await response.json();
          
          if (result.success) {
            statusDiv.className = 'fixed bottom-4 right-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded';
            statusDiv.textContent = 'Sync completed successfully!';
            setTimeout(() => {
              window.location.reload();
            }, 1500);
          } else if (result.offline) {
            statusDiv.className = 'fixed bottom-4 right-4 bg-amber-100 border border-amber-400 text-amber-700 px-4 py-3 rounded';
            statusDiv.textContent = result.message || 'Currently in offline mode. Your progress is saved locally.';
          } else {
            statusDiv.className = 'fixed bottom-4 right-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded';
            statusDiv.textContent = 'Sync failed: ' + (result.error || 'Unknown error');
          }
        } catch (err) {
          statusDiv.className = 'fixed bottom-4 right-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded';
          if (err.name === 'AbortError') {
            statusDiv.textContent = 'Sync timed out. Please try again later.';
          } else {
            statusDiv.textContent = 'Error syncing with database: ' + err.message;
          }
        } finally {
          syncButton.disabled = false;
          syncButton.innerHTML = '<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path></svg> Sync with Database';
          
          // Remove status message after 5 seconds
          setTimeout(() => {
            if (document.body.contains(statusDiv)) {
              document.body.removeChild(statusDiv);
            }
          }, 5000);
        }
      });
    }
  });
</script>

<%- include('partials/footer') %>