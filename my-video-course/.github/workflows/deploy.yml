name: Deploy to AWS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: video-course-app

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push Docker image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Ensure buildx exists
        docker buildx create --use --name multiarch || true
        
        # Build & push image
        docker buildx build --platform linux/amd64 \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --push .
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Plan
      working-directory: ./terraform
      run: terraform plan -var-file="terraform.tfvars"

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      working-directory: ./terraform
      run: terraform apply -auto-approve -var-file="terraform.tfvars"

    - name: Trigger Safe Instance Refresh
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      env:
        AWS_REGION: ${{ env.AWS_REGION }}
      run: |
        set -e  # Exit on error

        ASG_NAME=$(cd terraform && terraform output -raw autoscaling_group_name)

        # Fetch latest refresh status
        CURRENT_STATUS=$(aws autoscaling describe-instance-refreshes \
          --auto-scaling-group-name $ASG_NAME \
          --max-items 1 \
          --query 'InstanceRefreshes[0].Status' \
          --output text 2>/dev/null || echo "None")

        echo "Current instance refresh status: $CURRENT_STATUS"

        if [[ "$CURRENT_STATUS" == "InProgress" ]] || [[ "$CURRENT_STATUS" == "Pending" ]]; then
          echo "‚ö†Ô∏è Instance refresh already $CURRENT_STATUS. Waiting..."
          # Wait for current refresh to complete (max 15 min)
          aws autoscaling wait instance-refresh-complete --auto-scaling-group-name $ASG_NAME || true
        fi

        echo "üîÑ Starting new instance refresh..."
        # Start new refresh safely
        aws autoscaling start-instance-refresh --auto-scaling-group-name $ASG_NAME || \
          echo "‚ö†Ô∏è Could not start instance refresh, possibly blocked by recent refresh. Skipping..."

    