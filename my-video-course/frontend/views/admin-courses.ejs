<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Course Management</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f5f5f7;
            color: #1d1d1f;
        }
        .container { max-width: 800px; margin: 40px auto; padding: 0 20px; }
        .card { 
            background: white; 
            border-radius: 12px; 
            padding: 24px; 
            margin-bottom: 24px;
            box-shadow: 0 4px 16px rgba(0,0,0,0.1);
        }
        h1 { font-size: 32px; font-weight: 600; margin-bottom: 8px; }
        h2 { font-size: 24px; font-weight: 600; margin-bottom: 16px; }
        .form-group { margin-bottom: 16px; }
        label { display: block; font-weight: 500; margin-bottom: 8px; }
        input, textarea, select { 
            width: 100%; 
            padding: 12px; 
            border: 1px solid #d2d2d7; 
            border-radius: 8px; 
            font-size: 16px;
        }
        input:focus, textarea:focus, select:focus {
            outline: none;
            border-color: #007aff;
            box-shadow: 0 0 0 3px rgba(0,122,255,0.1);
        }
        .btn { 
            background: #007aff; 
            color: white; 
            border: none; 
            padding: 12px 24px; 
            border-radius: 8px; 
            font-size: 16px; 
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s;
        }
        .btn:hover { background: #0056b3; }
        .btn:disabled { background: #d2d2d7; cursor: not-allowed; }
        .progress { 
            width: 100%; 
            height: 8px; 
            background: #f0f0f0; 
            border-radius: 4px; 
            overflow: hidden;
            margin: 16px 0;
        }
        .progress-bar { 
            height: 100%; 
            background: #007aff; 
            width: 0%; 
            transition: width 0.3s;
        }
        .status { 
            padding: 12px; 
            border-radius: 8px; 
            margin: 16px 0;
            font-weight: 500;
        }
        .status.success { background: #d4edda; color: #155724; }
        .status.error { background: #f8d7da; color: #721c24; }
        .status.info { background: #d1ecf1; color: #0c5460; }
    </style>
</head>
<body>
    <div class="container">
        <h1>Course Management</h1>
        
        <!-- Create Course -->
        <div class="card">
            <h2>Create New Course</h2>
            <form id="courseForm">
                <div class="form-group">
                    <label for="courseName">Course Name</label>
                    <input type="text" id="courseName" name="name" required>
                </div>
                <div class="form-group">
                    <label for="courseTitle">Course Title</label>
                    <input type="text" id="courseTitle" name="title" required>
                </div>
                <div class="form-group">
                    <label for="courseDescription">Description</label>
                    <textarea id="courseDescription" name="description" rows="3"></textarea>
                </div>
                <div class="form-group">
                    <label for="courseCategory">Category</label>
                    <select id="courseCategory" name="category">
                        <option value="Programming">Programming</option>
                        <option value="Cloud Computing">Cloud Computing</option>
                        <option value="DevOps">DevOps</option>
                        <option value="Video Editing">Video Editing</option>
                        <option value="Infrastructure">Infrastructure</option>
                    </select>
                </div>
                <button type="submit" class="btn">Create Course</button>
            </form>
        </div>

        <!-- Upload Video -->
        <div class="card">
            <h2>Upload Video</h2>
            <form id="videoForm" enctype="multipart/form-data">
                <div class="form-group">
                    <label for="videoCourseName">Course Name</label>
                    <input type="text" id="videoCourseName" name="courseName" required>
                </div>
                <div class="form-group">
                    <label for="videoTitle">Video Title</label>
                    <input type="text" id="videoTitle" name="title" required>
                </div>
                <div class="form-group">
                    <label for="videoFile">Video File</label>
                    <input type="file" id="videoFile" name="video" accept="video/*" required>
                </div>
                <button type="submit" class="btn" id="uploadBtn">Upload & Process Video</button>
                <div class="progress" id="uploadProgress" style="display: none;">
                    <div class="progress-bar" id="progressBar"></div>
                </div>
            </form>
        </div>

        <!-- Status Messages -->
        <div id="statusContainer"></div>
    </div>

    <script>
        // Course creation
        document.getElementById('courseForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const courseData = Object.fromEntries(formData);
            
            try {
                showStatus('Creating course...', 'info');
                
                const response = await fetch('/api/courses', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(courseData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showStatus('Course created successfully!', 'success');
                    e.target.reset();
                } else {
                    showStatus(`Error: ${result.message}`, 'error');
                }
            } catch (error) {
                showStatus(`Error: ${error.message}`, 'error');
            }
        });

        // Video upload
        document.getElementById('videoForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const uploadBtn = document.getElementById('uploadBtn');
            const progress = document.getElementById('uploadProgress');
            const progressBar = document.getElementById('progressBar');
            
            try {
                uploadBtn.disabled = true;
                uploadBtn.textContent = 'Processing...';
                progress.style.display = 'block';
                
                showStatus('Uploading and processing video...', 'info');
                
                // Simulate progress
                let progressValue = 0;
                const progressInterval = setInterval(() => {
                    progressValue += Math.random() * 10;
                    if (progressValue > 90) progressValue = 90;
                    progressBar.style.width = progressValue + '%';
                }, 500);
                
                const response = await fetch('/api/courses/upload-video', {
                    method: 'POST',
                    body: formData
                });
                
                const result = await response.json();
                
                clearInterval(progressInterval);
                progressBar.style.width = '100%';
                
                if (result.success) {
                    showStatus('Video uploaded and processed successfully!', 'success');
                    e.target.reset();
                } else {
                    showStatus(`Error: ${result.message}`, 'error');
                }
            } catch (error) {
                showStatus(`Error: ${error.message}`, 'error');
            } finally {
                uploadBtn.disabled = false;
                uploadBtn.textContent = 'Upload & Process Video';
                setTimeout(() => {
                    progress.style.display = 'none';
                    progressBar.style.width = '0%';
                }, 2000);
            }
        });

        function showStatus(message, type) {
            const container = document.getElementById('statusContainer');
            const status = document.createElement('div');
            status.className = `status ${type}`;
            status.textContent = message;
            
            container.appendChild(status);
            
            setTimeout(() => {
                status.remove();
            }, 5000);
        }
    </script>
</body>
</html>