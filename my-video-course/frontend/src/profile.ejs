<%- include('partials/header', { title: 'Learning Progress', extraStyles: `
<link rel="stylesheet" href="/css/gamification.css">
` }) %>

<main class="max-w-6xl mx-auto px-4 py-6">
  <div class="mb-8">
    <div class="flex items-center justify-between">
      <div>
        <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">🏆 Learning Progress</h1>
        <p class="text-gray-600 dark:text-gray-400">Track your achievements and learning journey</p>
      </div>
      <div class="flex items-center gap-4">
        <button id="refresh-stats" class="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded transition-colors">
          <i class="fas fa-sync-alt mr-2"></i>Refresh
        </button>
        <div class="level-badge bg-green-500 text-white rounded-full w-12 h-12 flex items-center justify-center font-bold">
          <span class="user-level">1</span>
        </div>
        <div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg px-4 py-2 transition-colors">
          <span class="text-lg">🔥</span>
          <span class="user-streak font-bold text-lg ml-2 text-gray-900 dark:text-white">0</span>
          <span class="text-sm text-gray-500 dark:text-gray-400 block">day streak</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Stats Dashboard -->
  <div class="stats-dashboard grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
    <div class="stat-card bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 shadow-sm rounded-lg p-6 text-center transition-colors">
      <span class="stat-icon text-3xl">🏆</span>
      <div class="stat-value user-points text-2xl font-bold mt-2 text-gray-900 dark:text-white">0</div>
      <div class="stat-label text-sm text-gray-600 dark:text-gray-400">Total Points</div>
    </div>
    <div class="stat-card bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 shadow-sm rounded-lg p-6 text-center transition-colors">
      <span class="stat-icon text-3xl">📺</span>
      <div class="stat-value text-2xl font-bold mt-2 text-gray-900 dark:text-white" id="videos-watched">0</div>
      <div class="stat-label text-sm text-gray-600 dark:text-gray-400">Videos Watched</div>
    </div>
    <div class="stat-card bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 shadow-sm rounded-lg p-6 text-center transition-colors">
      <span class="stat-icon text-3xl">📚</span>
      <div class="stat-value text-2xl font-bold mt-2 text-gray-900 dark:text-white" id="courses-completed">0</div>
      <div class="stat-label text-sm text-gray-600 dark:text-gray-400">Courses Completed</div>
    </div>
    <div class="stat-card bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 shadow-sm rounded-lg p-6 text-center transition-colors">
      <span class="stat-icon text-3xl">🎯</span>
      <div class="stat-value text-2xl font-bold mt-2 text-gray-900 dark:text-white" id="achievements-earned">0</div>
      <div class="stat-label text-sm text-gray-600 dark:text-gray-400">Achievements</div>
    </div>
  </div>

  <!-- Level Progress -->
  <div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 shadow-sm rounded-lg p-6 mb-8 transition-colors">
    <div class="flex items-center justify-between mb-4">
      <h2 class="text-xl font-semibold text-gray-900 dark:text-white">Level Progress</h2>
      <span class="text-sm text-gray-600 dark:text-gray-400">Level <span class="user-level">1</span></span>
    </div>
    <div class="animated-progress bg-gray-200 dark:bg-gray-700 rounded-full h-3 mb-2">
      <div class="animated-progress-fill bg-green-500 h-3 rounded-full transition-all" id="level-progress" style="width: 0%"></div>
    </div>
    <div class="flex justify-between text-sm text-gray-600 dark:text-gray-400">
      <span id="current-xp">0 XP</span>
      <span id="next-level-xp">100 XP</span>
    </div>
  </div>

  <!-- Achievements Section -->
  <div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 shadow-sm rounded-lg p-6 mb-8 transition-colors">
    <h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-6">Achievements</h2>
    <div class="achievements-grid grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4" id="achievements-container">
      <!-- Achievements populated by JavaScript -->
    </div>
  </div>

  <!-- Learning Streak Calendar -->
  <div class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 shadow-sm rounded-lg p-6 transition-colors">
    <div class="flex items-center justify-between mb-6">
      <h2 class="text-xl font-semibold text-gray-900 dark:text-white">Learning Streak</h2>
      <div class="flex items-center gap-2">
        <button id="prev-month" class="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors">
          <i class="fas fa-chevron-left text-gray-600 dark:text-gray-400"></i>
        </button>
        <span id="calendar-month" class="font-medium min-w-[120px] text-center text-gray-900 dark:text-white"></span>
        <button id="next-month" class="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded transition-colors">
          <i class="fas fa-chevron-right text-gray-600 dark:text-gray-400"></i>
        </button>
      </div>
    </div>
    <div class="grid grid-cols-7 gap-2 mb-4">
      <div class="text-center text-sm font-medium text-gray-600 dark:text-gray-400 py-2">Sun</div>
      <div class="text-center text-sm font-medium text-gray-600 dark:text-gray-400 py-2">Mon</div>
      <div class="text-center text-sm font-medium text-gray-600 dark:text-gray-400 py-2">Tue</div>
      <div class="text-center text-sm font-medium text-gray-600 dark:text-gray-400 py-2">Wed</div>
      <div class="text-center text-sm font-medium text-gray-600 dark:text-gray-400 py-2">Thu</div>
      <div class="text-center text-sm font-medium text-gray-600 dark:text-gray-400 py-2">Fri</div>
      <div class="text-center text-sm font-medium text-gray-600 dark:text-gray-400 py-2">Sat</div>
    </div>
    <div class="grid grid-cols-7 gap-1 sm:gap-2" id="streak-calendar">
      <!-- Calendar populated by JavaScript -->
    </div>
    <div class="mt-4 flex items-center justify-between text-sm text-gray-600 dark:text-gray-400">
      <span>Current Streak: <strong class="user-streak">0</strong> days</span>
      <span>Longest Streak: <strong id="longest-streak">0</strong> days</span>
    </div>
  </div>
</main>

<script src="/js/gamification.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
  let retryCount = 0;
  const maxRetries = 10;
  
  function tryUpdateProfile() {
    if (window.gamificationSystem) {
      updateProfileDisplay();
    } else if (retryCount < maxRetries) {
      retryCount++;
      setTimeout(tryUpdateProfile, 500);
    } else {
      console.error('Gamification system failed to load');
      showFallbackData();
    }
  }
  
  function showFallbackData() {
    const elements = {
      'videos-watched': '0',
      'courses-completed': '0', 
      'achievements-earned': '0/8',
      'current-xp': '0 XP',
      'next-level-xp': '100 XP',
      'longest-streak': '0'
    };
    
    Object.entries(elements).forEach(([id, value]) => {
      const el = document.getElementById(id);
      if (el) el.textContent = value;
    });
  }
  
  loadWatchDates().then(() => {
    if (window.gamificationSystem) {
      window.gamificationSystem.syncWithLocalStorageVideos().then(() => {
        updateProfileDisplay();
      });
    } else {
      updateProfileDisplay();
    }
  });
  
  async function updateProfileDisplay() {
    if (!window.gamificationSystem) {
      console.warn('Gamification system not loaded yet');
      return;
    }
    
    const progress = await window.gamificationSystem.getProgressSummary();
    
    const videosWatchedEl = document.getElementById('videos-watched');
    const coursesCompletedEl = document.getElementById('courses-completed');
    const achievementsEarnedEl = document.getElementById('achievements-earned');
    
    if (videosWatchedEl) {
      videosWatchedEl.textContent = progress.videosWatched || 0;
    }
    if (coursesCompletedEl) coursesCompletedEl.textContent = progress.coursesCompleted || 0;
    if (achievementsEarnedEl) achievementsEarnedEl.textContent = `${progress.achievements || 0}/${progress.totalAchievements || 0}`;
    
    // Update level progress
    const xpForNextLevel = (progress.level || 1) * 100;
    const currentXP = window.gamificationSystem.userStats?.experiencePoints || 0;
    const progressPercent = (currentXP / xpForNextLevel) * 100;
    
    const levelProgressEl = document.getElementById('level-progress');
    const currentXpEl = document.getElementById('current-xp');
    const nextLevelXpEl = document.getElementById('next-level-xp');
    const longestStreakEl = document.getElementById('longest-streak');
    
    if (levelProgressEl) levelProgressEl.style.width = `${progressPercent}%`;
    if (currentXpEl) currentXpEl.textContent = `${currentXP} XP`;
    if (nextLevelXpEl) nextLevelXpEl.textContent = `${xpForNextLevel} XP`;
    if (longestStreakEl) longestStreakEl.textContent = progress.longestStreak || 0;
    
    populateAchievements();
    populateStreakCalendar();
  }
  
  function populateAchievements() {
    const container = document.getElementById('achievements-container');
    if (!container || !window.gamificationSystem) return;
    
    const definitions = window.gamificationSystem.getAchievementDefinitions();
    const earned = window.gamificationSystem.achievements || [];
    
    container.innerHTML = '';
    
    Object.values(definitions).forEach(achievement => {
      const isEarned = earned.includes(achievement.id);
      const card = document.createElement('div');
      card.className = `achievement-card card border rounded-lg p-4 text-center ${isEarned ? 'bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-700' : 'bg-gray-50 dark:bg-gray-700 border-gray-200 dark:border-gray-600 opacity-60'}`;
      
      card.innerHTML = `
        <span class="achievement-card-icon text-2xl">${achievement.icon}</span>
        <div class="achievement-card-name font-medium mt-2 text-gray-900 dark:text-white">${achievement.name}</div>
        <div class="achievement-card-description text-sm text-gray-600 dark:text-gray-400 mt-1">${achievement.description}</div>
        <div class="achievement-card-points text-xs text-gray-500 dark:text-gray-400 mt-2">${achievement.points} points</div>
      `;
      
      container.appendChild(card);
    });
  }
  
  let currentCalendarDate = new Date();
  let watchDatesData = [];
  
  async function loadWatchDates() {
    try {
      const response = await fetch('/api/videos/watch-dates');
      if (response.ok) {
        watchDatesData = await response.json();
      }
    } catch (error) {
      console.warn('Failed to load watch dates:', error);
    }
  }
  
  function populateStreakCalendar() {
    const calendar = document.getElementById('streak-calendar');
    const monthLabel = document.getElementById('calendar-month');
    
    if (!calendar || !monthLabel) return;
    
    monthLabel.textContent = currentCalendarDate.toLocaleDateString('en-US', { 
      month: 'long', 
      year: 'numeric' 
    });
    
    const firstDay = new Date(currentCalendarDate.getFullYear(), currentCalendarDate.getMonth(), 1);
    const startDate = new Date(firstDay.getTime() - (firstDay.getDay() * 24 * 60 * 60 * 1000));
    
    calendar.innerHTML = '';
    
    for (let i = 0; i < 42; i++) {
      const date = new Date(startDate.getTime() + (i * 24 * 60 * 60 * 1000));
      const dateString = date.toISOString().split('T')[0];
      
      const dayWatchData = watchDatesData.filter(w => w.date === dateString);
      const hasActivity = dayWatchData.length > 0;
      const isCurrentMonth = date.getMonth() === currentCalendarDate.getMonth();
      const isToday = dateString === new Date().toISOString().split('T')[0];
      
      const dayElement = document.createElement('div');
      dayElement.className = `w-8 h-8 rounded flex items-center justify-center text-xs transition-colors cursor-pointer relative ${
        hasActivity 
          ? 'bg-green-500 text-white' 
          : isCurrentMonth 
            ? 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600' 
            : 'bg-gray-50 dark:bg-gray-800 text-gray-400 dark:text-gray-500'
      } ${
        isToday ? 'ring-2 ring-blue-500' : ''
      }`;
      dayElement.textContent = date.getDate();
      
      if (hasActivity) {
        const videoTitles = dayWatchData.map(w => `${w.videoTitle} (${w.courseName})`).join('\n');
        dayElement.title = `Videos watched on ${date.toLocaleDateString()}:\n${videoTitles}`;
        
        if (dayWatchData.length > 1) {
          const indicator = document.createElement('div');
          indicator.className = 'absolute -top-1 -right-1 w-3 h-3 bg-yellow-400 rounded-full text-xs flex items-center justify-center text-black font-bold';
          indicator.textContent = dayWatchData.length;
          indicator.style.fontSize = '8px';
          dayElement.appendChild(indicator);
        }
      }
      
      calendar.appendChild(dayElement);
    }
  }
  
  // Calendar navigation
  document.getElementById('prev-month').addEventListener('click', () => {
    currentCalendarDate = new Date(currentCalendarDate.getFullYear(), currentCalendarDate.getMonth() - 1, 1);
    populateStreakCalendar();
  });
  
  document.getElementById('next-month').addEventListener('click', () => {
    currentCalendarDate = new Date(currentCalendarDate.getFullYear(), currentCalendarDate.getMonth() + 1, 1);
    populateStreakCalendar();
  });
  
  // Refresh stats
  document.getElementById('refresh-stats').addEventListener('click', async function() {
    this.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i> Refreshing...';
    
    if (window.gamificationSystem) {
      await window.gamificationSystem.syncWithLocalStorageVideos();
      await loadWatchDates();
      updateProfileDisplay();
    }
    
    this.innerHTML = '<i class="fas fa-sync-alt mr-1"></i> Refresh';
  });
  
  tryUpdateProfile();
});
</script>

<%- include('partials/footer') %>