<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Course Manager</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
      tailwind.config = {
        darkMode: 'class',
        theme: {
          extend: {
            colors: {
              'apple-blue': '#007AFF',
              'apple-gray': '#F2F2F7'
            },
            fontFamily: {
              'sans': ['-apple-system', 'BlinkMacSystemFont', 'SF Pro Display', 'system-ui', 'sans-serif']
            }
          }
        }
      }
    </script>
</head>
<body class="bg-apple-gray dark:bg-gray-900 font-sans antialiased transition-colors duration-200">
    <div class="flex h-screen">
        <!-- Sidebar -->
        <div class="w-64 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 transition-colors duration-200">
            <div class="p-6">
                <div class="flex items-center space-x-3 mb-8">
                    <div class="w-10 h-10 bg-gradient-to-br from-purple-500 to-blue-600 rounded-2xl flex items-center justify-center">
                        <span class="text-white font-medium">üëë</span>
                    </div>
                    <div>
                        <h1 class="text-lg font-semibold text-gray-900 dark:text-white">Admin Panel</h1>
                        <p class="text-xs text-gray-500 dark:text-gray-400">Super Admin</p>
                    </div>
                </div>
                
                <nav class="space-y-2">
                    <a href="/admin/dashboard" class="flex items-center space-x-3 px-4 py-3 text-gray-600 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-2xl transition-colors">
                        <span>üìä</span>
                        <span>Dashboard</span>
                    </a>
                    <a href="/admin/course-manager" class="flex items-center space-x-3 px-4 py-3 bg-purple-50 dark:bg-purple-900/20 text-purple-600 dark:text-purple-400 rounded-2xl font-medium">
                        <span>üìö</span>
                        <span>Course Manager</span>
                    </a>
                    <a href="/admin/teacher-requests" class="flex items-center space-x-3 px-4 py-3 text-gray-600 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-2xl transition-colors">
                        <span>üë®üè´</span>
                        <span>Teacher Requests</span>
                    </a>
                </nav>
            </div>
            
            <div class="absolute bottom-6 left-6 right-6">
                <button id="themeToggle" class="w-full flex items-center justify-center space-x-2 px-4 py-3 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 rounded-2xl hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
                    <span id="themeIcon">üåô</span>
                    <span>Toggle Theme</span>
                </button>
            </div>
        </div>
        
        <!-- Main Content -->
        <div class="flex-1 flex flex-col">
            <!-- Course List -->
            <div class="flex-1 overflow-auto p-8">
                <div class="mb-8">
                    <h1 class="text-3xl font-bold text-gray-900 dark:text-white mb-2">Course Manager</h1>
                    <p class="text-gray-600 dark:text-gray-400">Edit and manage course content</p>
                </div>
                
                <div id="courseList" class="space-y-4">
                    <!-- Courses will be loaded here -->
                </div>
            </div>
        </div>
    </div>
    
    <!-- Course Editor Modal -->
    <div id="courseModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div class="bg-white dark:bg-gray-800 rounded-3xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden transition-colors duration-200">
            <div class="p-6 border-b border-gray-200 dark:border-gray-700">
                <div class="flex justify-between items-center">
                    <h2 class="text-2xl font-bold text-gray-900 dark:text-white">Edit Course</h2>
                    <button id="closeModal" class="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-xl transition-colors">
                        <span class="text-gray-500 dark:text-gray-400 text-xl">‚úï</span>
                    </button>
                </div>
            </div>
            
            <div class="p-6 overflow-y-auto max-h-[calc(90vh-140px)]">
                <form id="courseForm" class="space-y-6">
                    <!-- Course Title -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Course Title</label>
                        <input type="text" id="courseTitle" class="w-full px-4 py-3 bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 text-gray-900 dark:text-white rounded-2xl focus:outline-none focus:ring-2 focus:ring-purple-500">
                    </div>
                    
                    <!-- Course Description -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Description</label>
                        <textarea id="courseDescription" rows="4" class="w-full px-4 py-3 bg-gray-50 dark:bg-gray-700 border border-gray-200 dark:border-gray-600 text-gray-900 dark:text-white rounded-2xl focus:outline-none focus:ring-2 focus:ring-purple-500"></textarea>
                    </div>
                    
                    <!-- Videos Section -->
                    <div>
                        <div class="flex justify-between items-center mb-4">
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Videos</label>
                            <button type="button" id="addVideo" class="px-4 py-2 bg-purple-500 text-white rounded-xl hover:bg-purple-600 transition-colors">
                                + Add Video
                            </button>
                        </div>
                        <div id="videosList" class="space-y-3">
                            <!-- Video items will be added here -->
                        </div>
                    </div>
                    
                    <!-- Quizzes Section -->
                    <div>
                        <div class="flex justify-between items-center mb-4">
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">Quizzes</label>
                            <button type="button" id="addQuiz" class="px-4 py-2 bg-blue-500 text-white rounded-xl hover:bg-blue-600 transition-colors">
                                + Add Quiz
                            </button>
                        </div>
                        <div id="quizzesList" class="space-y-4">
                            <!-- Quiz items will be added here -->
                        </div>
                    </div>
                </form>
            </div>
            
            <!-- Sticky Save Bar -->
            <div class="p-6 border-t border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800">
                <div class="flex justify-end space-x-3">
                    <button id="cancelEdit" class="px-6 py-3 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-2xl hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors">
                        Cancel
                    </button>
                    <button id="saveCourse" class="px-6 py-3 bg-gradient-to-r from-purple-500 to-blue-600 text-white rounded-2xl hover:from-purple-600 hover:to-blue-700 transition-all shadow-lg">
                        Save Changes
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        let currentCourse = null;
        
        // Dark theme toggle
        function initTheme() {
            const theme = localStorage.getItem("theme") || "light";
            document.documentElement.classList.toggle("dark", theme === "dark");
            document.getElementById('themeIcon').textContent = theme === "dark" ? '‚òÄÔ∏è' : 'üåô';
        }
        
        function toggleTheme() {
            const newTheme = document.documentElement.classList.contains("dark") ? "light" : "dark";
            document.documentElement.classList.toggle("dark", newTheme === "dark");
            localStorage.setItem("theme", newTheme);
            document.getElementById('themeIcon').textContent = newTheme === "dark" ? '‚òÄÔ∏è' : 'üåô';
        }
        
        initTheme();
        document.getElementById('themeToggle').addEventListener('click', toggleTheme);
        
        // Load courses
        document.addEventListener('DOMContentLoaded', () => {
            loadCourses();
        });
        
        async function loadCourses() {
            try {
                const token = localStorage.getItem('accessToken');
                const response = await fetch('/api/courses', {
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    renderCourses(data.data || []);
                }
            } catch (error) {
                console.error('Error loading courses:', error);
            }
        }
        
        function renderCourses(courses) {
            const container = document.getElementById('courseList');
            
            if (courses.length === 0) {
                container.innerHTML = '<p class="text-gray-500 dark:text-gray-400 text-center py-12">No courses found</p>';
                return;
            }
            
            container.innerHTML = courses.map(course => `
                <div class="bg-white dark:bg-gray-800 rounded-3xl p-6 shadow-sm border border-gray-100 dark:border-gray-700 transition-colors duration-200">
                    <div class="flex justify-between items-start">
                        <div class="flex-1">
                            <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">${course.title || course.name || 'Untitled Course'}</h3>
                            <p class="text-gray-500 dark:text-gray-400 mb-4">${course.description || 'No description available'}</p>
                            <div class="flex space-x-4 text-sm text-gray-500 dark:text-gray-400">
                                <span>üìπ ${course.totalLectures || 0} videos</span>
                                <span>üë• ${course.enrollments || 0} students</span>
                                <span>‚≠ê ${course.rating || 'N/A'}</span>
                                <span>üìÇ ${course.category || 'General'}</span>
                            </div>
                        </div>
                        <button onclick="editCourse('${course.name || course._id}', '${course.title || course.name}')" 
                                class="px-6 py-3 bg-gradient-to-r from-purple-500 to-blue-600 text-white rounded-2xl hover:from-purple-600 hover:to-blue-700 transition-all shadow-lg">
                            Edit Course
                        </button>
                    </div>
                </div>
            `).join('');
        }
        
        async function editCourse(courseId, courseTitle) {
            // Load course data and open modal
            currentCourse = courseId;
            document.getElementById('courseModal').classList.remove('hidden');
            
            // Load actual course details
            try {
                const token = localStorage.getItem('accessToken');
                const response = await fetch('/api/courses', {
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    const course = data.data.find(c => c.name === courseId || c._id === courseId);
                    
                    if (course) {
                        document.getElementById('courseTitle').value = course.title || course.name || '';
                        document.getElementById('courseDescription').value = course.description || '';
                        
                        // Load videos if available
                        const videosList = document.getElementById('videosList');
                        videosList.innerHTML = '';
                        
                        if (course.videos && course.videos.length > 0) {
                            course.videos.slice(0, 10).forEach(video => { // Show first 10 videos
                                const videoItem = document.createElement('div');
                                videoItem.className = 'flex space-x-3 p-4 bg-gray-50 dark:bg-gray-700 rounded-2xl';
                                videoItem.innerHTML = `
                                    <input type="text" value="${video.title || ''}" placeholder="Video Title" class="flex-1 px-3 py-2 bg-white dark:bg-gray-600 border border-gray-200 dark:border-gray-500 rounded-xl">
                                    <input type="url" value="${video.videoUrl || ''}" placeholder="Video URL" class="flex-1 px-3 py-2 bg-white dark:bg-gray-600 border border-gray-200 dark:border-gray-500 rounded-xl">
                                    <button type="button" onclick="this.parentElement.remove()" class="px-3 py-2 bg-red-500 text-white rounded-xl hover:bg-red-600">Remove</button>
                                `;
                                videosList.appendChild(videoItem);
                            });
                        }
                    }
                }
            } catch (error) {
                console.error('Error loading course details:', error);
                // Fallback to basic info
                document.getElementById('courseTitle').value = courseTitle || 'Course Title';
                document.getElementById('courseDescription').value = 'Course description...';
            }
        }
        
        // Modal controls
        document.getElementById('closeModal').addEventListener('click', () => {
            document.getElementById('courseModal').classList.add('hidden');
        });
        
        document.getElementById('cancelEdit').addEventListener('click', () => {
            document.getElementById('courseModal').classList.add('hidden');
        });
        
        // Add video functionality
        document.getElementById('addVideo').addEventListener('click', () => {
            const videosList = document.getElementById('videosList');
            const videoItem = document.createElement('div');
            videoItem.className = 'flex space-x-3 p-4 bg-gray-50 dark:bg-gray-700 rounded-2xl';
            videoItem.innerHTML = `
                <input type="text" placeholder="Video Title" class="flex-1 px-3 py-2 bg-white dark:bg-gray-600 border border-gray-200 dark:border-gray-500 rounded-xl">
                <input type="url" placeholder="Video URL" class="flex-1 px-3 py-2 bg-white dark:bg-gray-600 border border-gray-200 dark:border-gray-500 rounded-xl">
                <button type="button" onclick="this.parentElement.remove()" class="px-3 py-2 bg-red-500 text-white rounded-xl hover:bg-red-600">Remove</button>
            `;
            videosList.appendChild(videoItem);
        });
        
        // Add quiz functionality
        document.getElementById('addQuiz').addEventListener('click', () => {
            const quizzesList = document.getElementById('quizzesList');
            const quizItem = document.createElement('div');
            quizItem.className = 'p-4 bg-gray-50 dark:bg-gray-700 rounded-2xl space-y-3';
            quizItem.innerHTML = `
                <input type="text" placeholder="Quiz Question" class="w-full px-3 py-2 bg-white dark:bg-gray-600 border border-gray-200 dark:border-gray-500 rounded-xl">
                <div class="grid grid-cols-2 gap-3">
                    <input type="text" placeholder="Option A" class="px-3 py-2 bg-white dark:bg-gray-600 border border-gray-200 dark:border-gray-500 rounded-xl">
                    <input type="text" placeholder="Option B" class="px-3 py-2 bg-white dark:bg-gray-600 border border-gray-200 dark:border-gray-500 rounded-xl">
                    <input type="text" placeholder="Option C" class="px-3 py-2 bg-white dark:bg-gray-600 border border-gray-200 dark:border-gray-500 rounded-xl">
                    <input type="text" placeholder="Option D" class="px-3 py-2 bg-white dark:bg-gray-600 border border-gray-200 dark:border-gray-500 rounded-xl">
                </div>
                <select class="w-full px-3 py-2 bg-white dark:bg-gray-600 border border-gray-200 dark:border-gray-500 rounded-xl">
                    <option>Select Correct Answer</option>
                    <option value="A">Option A</option>
                    <option value="B">Option B</option>
                    <option value="C">Option C</option>
                    <option value="D">Option D</option>
                </select>
                <button type="button" onclick="this.parentElement.remove()" class="px-4 py-2 bg-red-500 text-white rounded-xl hover:bg-red-600">Remove Quiz</button>
            `;
            quizzesList.appendChild(quizItem);
        });
        
        // Save course
        document.getElementById('saveCourse').addEventListener('click', async () => {
            const title = document.getElementById('courseTitle').value;
            const description = document.getElementById('courseDescription').value;
            
            // Collect videos and quizzes data
            const videos = Array.from(document.querySelectorAll('#videosList > div')).map(item => ({
                title: item.querySelector('input[placeholder="Video Title"]').value,
                url: item.querySelector('input[placeholder="Video URL"]').value
            }));
            
            const quizzes = Array.from(document.querySelectorAll('#quizzesList > div')).map(item => ({
                question: item.querySelector('input[placeholder="Quiz Question"]').value,
                options: [
                    item.querySelector('input[placeholder="Option A"]').value,
                    item.querySelector('input[placeholder="Option B"]').value,
                    item.querySelector('input[placeholder="Option C"]').value,
                    item.querySelector('input[placeholder="Option D"]').value
                ],
                correct: item.querySelector('select').value
            }));
            
            try {
                const token = localStorage.getItem('accessToken');
                const response = await fetch(`/api/courses/${currentCourse}`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ title, description, videos, quizzes })
                });
                
                if (response.ok) {
                    alert('Course updated successfully!');
                    document.getElementById('courseModal').classList.add('hidden');
                    loadCourses();
                } else {
                    alert('Failed to update course');
                }
            } catch (error) {
                alert('Error saving course: ' + error.message);
            }
        });
    </script>
</body>
</html>