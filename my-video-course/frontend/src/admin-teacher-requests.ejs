<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teacher Requests - Admin Panel</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: #f5f5f7;
            color: #1d1d1f;
            line-height: 1.47059;
            font-weight: 400;
            letter-spacing: -0.022em;
        }
        
        .dark body {
            background: #000;
            color: #f5f5f7;
        }
        
        .header {
            background: white;
            border-bottom: 1px solid #d2d2d7;
            padding: 20px 0;
        }
        
        .dark .header {
            background: #1d1d1f;
            border-bottom-color: #424245;
        }
        
        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .header-title {
            font-size: 28px;
            font-weight: 600;
            color: #1d1d1f;
            display: flex;
            align-items: center;
            gap: 12px;
        }
        
        .dark .header-title {
            color: #f5f5f7;
        }
        
        .badge {
            background: #ff3b30;
            color: white;
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
        }
        
        .header-actions {
            display: flex;
            gap: 12px;
        }
        
        .btn {
            padding: 12px 20px;
            border: none;
            border-radius: 12px;
            font-size: 14px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }
        
        .btn-secondary {
            background: #f2f2f7;
            color: #1d1d1f;
        }
        
        .dark .btn-secondary {
            background: #2c2c2e;
            color: #f5f5f7;
        }
        
        .btn-secondary:hover {
            background: #e5e5ea;
            transform: translateY(-1px);
        }
        
        .dark .btn-secondary:hover {
            background: #3a3a3c;
        }
        
        .btn-danger {
            background: #ff3b30;
            color: white;
        }
        
        .btn-danger:hover {
            background: #d70015;
            transform: translateY(-1px);
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 40px 20px;
        }
        
        .section {
            background: white;
            border-radius: 18px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.08);
            margin-bottom: 32px;
            overflow: hidden;
        }
        
        .dark .section {
            background: #1d1d1f;
            box-shadow: 0 4px 20px rgba(255,255,255,0.05);
        }
        
        .section-header {
            padding: 24px 32px;
            border-bottom: 1px solid #f2f2f7;
        }
        
        .dark .section-header {
            border-bottom-color: #2c2c2e;
        }
        
        .section-title {
            font-size: 20px;
            font-weight: 600;
            color: #1d1d1f;
        }
        
        .dark .section-title {
            color: #f5f5f7;
        }
        
        .request-item {
            padding: 24px 32px;
            border-bottom: 1px solid #f2f2f7;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .dark .request-item {
            border-bottom-color: #2c2c2e;
        }
        
        .request-item:last-child {
            border-bottom: none;
        }
        
        .request-info h3 {
            font-size: 16px;
            font-weight: 600;
            color: #1d1d1f;
            margin-bottom: 4px;
        }
        
        .dark .request-info h3 {
            color: #f5f5f7;
        }
        
        .request-email {
            font-size: 14px;
            color: #86868b;
            margin-bottom: 4px;
        }
        
        .request-date {
            font-size: 12px;
            color: #86868b;
        }
        
        .request-actions {
            display: flex;
            gap: 8px;
        }
        
        .btn-approve {
            background: #30d158;
            color: white;
        }
        
        .btn-approve:hover {
            background: #28cd4f;
            transform: translateY(-1px);
        }
        
        .btn-reject {
            background: #ff3b30;
            color: white;
        }
        
        .btn-reject:hover {
            background: #d70015;
            transform: translateY(-1px);
        }
        
        .status-badge {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }
        
        .status-approved {
            background: rgba(48, 209, 88, 0.1);
            color: #30d158;
        }
        
        .status-rejected {
            background: rgba(255, 59, 48, 0.1);
            color: #ff3b30;
        }
        
        .empty-state {
            padding: 60px 32px;
            text-align: center;
            color: #86868b;
        }
        
        .empty-icon {
            font-size: 48px;
            margin-bottom: 16px;
        }
        
        .theme-toggle {
            position: fixed;
            top: 20px;
            right: 20px;
            width: 44px;
            height: 44px;
            border: none;
            border-radius: 22px;
            background: white;
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            transition: all 0.2s ease;
            z-index: 1000;
        }
        
        .dark .theme-toggle {
            background: #1d1d1f;
            box-shadow: 0 4px 20px rgba(255,255,255,0.1);
        }
        
        .theme-toggle:hover {
            transform: scale(1.1);
        }
        
        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                gap: 16px;
            }
            
            .request-item {
                flex-direction: column;
                gap: 16px;
                align-items: flex-start;
            }
            
            .request-actions {
                width: 100%;
                justify-content: flex-end;
            }
        }
    </style>
</head>
<body>
    <button class="theme-toggle" id="themeToggle">üåô</button>
    
    <header class="header">
        <div class="header-content">
            <h1 class="header-title">
                üë• Teacher Access Requests
                <span id="requestBadge" class="badge" style="display: none;">0</span>
            </h1>
            <div class="header-actions">
                <a href="/dashboard" class="btn btn-secondary">
                    ‚Üê Back to Dashboard
                </a>
                <button id="logoutBtn" class="btn btn-danger">
                    Logout
                </button>
            </div>
        </div>
    </header>

    <div class="container">
        <div class="section">
            <div class="section-header">
                <h2 class="section-title">Pending Requests</h2>
            </div>
            <div id="pendingRequests">
                <!-- Requests will be loaded here -->
            </div>
        </div>

        <div class="section">
            <div class="section-header">
                <h2 class="section-title">Processed Requests</h2>
            </div>
            <div id="processedRequests">
                <!-- Processed requests will be loaded here -->
            </div>
        </div>
    </div>

    <script>
        // Theme management
        function initTheme() {
            const theme = localStorage.getItem('theme') || 'light';
            document.documentElement.classList.toggle('dark', theme === 'dark');
            document.getElementById('themeToggle').textContent = theme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
        }
        
        function toggleTheme() {
            const isDark = document.documentElement.classList.contains('dark');
            const newTheme = isDark ? 'light' : 'dark';
            document.documentElement.classList.toggle('dark', newTheme === 'dark');
            localStorage.setItem('theme', newTheme);
            document.getElementById('themeToggle').textContent = newTheme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
        }
        
        initTheme();
        document.getElementById('themeToggle').addEventListener('click', toggleTheme);

        document.addEventListener('DOMContentLoaded', () => {
            loadTeacherRequests();
        });

        async function loadTeacherRequests() {
            try {
                const token = localStorage.getItem('accessToken');
                const response = await fetch('/api/admin/teacher-requests', {
                    headers: { 
                        'Authorization': `Bearer ${token}`,
                        'x-admin-key': 'admin123'
                    }
                });

                const data = await response.json();
                if (data.success) {
                    renderRequests(data.data);
                    updateBadge(data.data.filter(r => r.status === 'pending').length);
                } else {
                    alert('Failed to load requests: ' + data.error);
                }
            } catch (error) {
                alert('Error loading requests: ' + error.message);
            }
        }
        
        function updateBadge(count) {
            const badge = document.getElementById('requestBadge');
            if (count > 0) {
                badge.textContent = count;
                badge.style.display = 'inline';
            } else {
                badge.style.display = 'none';
            }
        }

        function renderRequests(requests) {
            const pending = requests.filter(r => r.status === 'pending');
            const processed = requests.filter(r => r.status !== 'pending');

            // Render pending requests
            const pendingContainer = document.getElementById('pendingRequests');
            if (pending.length === 0) {
                pendingContainer.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-icon">üìù</div>
                        <div>No pending requests</div>
                    </div>
                `;
            } else {
                pendingContainer.innerHTML = pending.map(request => `
                    <div class="request-item">
                        <div class="request-info">
                            <h3>${request.name}</h3>
                            <div class="request-email">${request.email}</div>
                            <div class="request-date">Requested: ${new Date(request.requestedAt).toLocaleDateString()}</div>
                        </div>
                        <div class="request-actions">
                            <button onclick="approveRequest('${request._id}')" class="btn btn-approve">
                                ‚úì Approve
                            </button>
                            <button onclick="rejectRequest('${request._id}')" class="btn btn-reject">
                                ‚úï Reject
                            </button>
                        </div>
                    </div>
                `).join('');
            }

            // Render processed requests
            const processedContainer = document.getElementById('processedRequests');
            if (processed.length === 0) {
                processedContainer.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-icon">üìã</div>
                        <div>No processed requests</div>
                    </div>
                `;
            } else {
                processedContainer.innerHTML = processed.map(request => `
                    <div class="request-item">
                        <div class="request-info">
                            <h3>${request.name}</h3>
                            <div class="request-email">${request.email}</div>
                            <div class="request-date">
                                ${request.status === 'approved' ? 'Approved' : 'Rejected'}: 
                                ${new Date(request.reviewedAt).toLocaleDateString()}
                            </div>
                        </div>
                        <span class="status-badge status-${request.status}">
                            ${request.status}
                        </span>
                    </div>
                `).join('');
            }
        }

        async function approveRequest(requestId) {
            await processRequest(requestId, 'approved');
        }

        async function rejectRequest(requestId) {
            await processRequest(requestId, 'rejected');
        }

        async function processRequest(requestId, action) {
            try {
                const token = localStorage.getItem('accessToken');
                const response = await fetch(`/api/admin/teacher-requests/${requestId}`, {
                    method: 'PUT',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json',
                        'x-admin-key': 'admin123'
                    },
                    body: JSON.stringify({ action })
                });

                const data = await response.json();
                if (data.success) {
                    loadTeacherRequests();
                } else {
                    alert('Failed to process request: ' + data.error);
                }
            } catch (error) {
                alert('Error processing request: ' + error.message);
            }
        }

        // Logout functionality
        document.getElementById('logoutBtn').addEventListener('click', async () => {
            try {
                await fetch('/api/auth/logout', { method: 'POST' });
            } catch (error) {
                console.error('Logout failed:', error);
            } finally {
                localStorage.removeItem('cognitoToken');
                localStorage.removeItem('accessToken');
                localStorage.removeItem('user');
                localStorage.removeItem('userId');
                window.location.href = '/login';
            }
        });
    </script>
</body>
</html>