<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= courseName %> Course - Video Course Platform</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        
        body {
            font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, sans-serif;
            background: #fbfbfd;
            color: #1d1d1f;
            line-height: 1.5;
            font-weight: 400;
            letter-spacing: -0.01em;
        }
        
        .dark body {
            background: #000;
            color: #f5f5f7;
        }
        
        .container {
            max-width: 1080px;
            margin: 0 auto;
            padding: 60px 24px;
        }
        
        .course-header {
            text-align: center;
            margin-bottom: 64px;
        }
        
        .course-title {
            font-size: 56px;
            font-weight: 700;
            margin-bottom: 12px;
            color: #1d1d1f;
            letter-spacing: -0.03em;
        }
        
        .dark .course-title {
            color: #f5f5f7;
        }
        
        .course-subtitle {
            font-size: 19px;
            color: #6e6e73;
            margin-bottom: 40px;
            font-weight: 400;
        }
        
        .course-actions {
            display: flex;
            justify-content: center;
            margin-bottom: 40px;
        }
        
        .btn {
            padding: 12px 24px;
            border: none;
            border-radius: 980px;
            font-size: 17px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.15s ease;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 6px;
            min-height: 44px;
        }
        
        .btn-primary {
            background: #007aff;
            color: white;
        }
        
        .btn-primary:hover {
            background: #0051d5;
            transform: scale(1.02);
        }
        
        .progress-card {
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(20px);
            border-radius: 12px;
            padding: 16px 20px;
            border: 0.5px solid rgba(0, 0, 0, 0.04);
            margin-bottom: 32px;
        }
        
        .dark .progress-card {
            background: rgba(28, 28, 30, 0.8);
            border: 0.5px solid rgba(255, 255, 255, 0.1);
        }
        
        .progress-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 12px;
        }
        
        .progress-title {
            font-size: 15px;
            font-weight: 600;
            color: #1d1d1f;
        }
        
        .dark .progress-title {
            color: #f5f5f7;
        }
        
        .progress-stats {
            font-size: 13px;
            font-weight: 500;
            color: #6e6e73;
        }
        
        .progress-bar {
            width: 100%;
            height: 4px;
            background: #f2f2f7;
            border-radius: 2px;
            overflow: hidden;
        }
        
        .dark .progress-bar {
            background: #2c2c2e;
        }
        
        .progress-fill {
            height: 100%;
            background: #007aff;
            border-radius: 2px;
            transition: width 0.4s ease;
        }
        
        .section-title {
            font-size: 28px;
            font-weight: 700;
            margin-bottom: 32px;
            color: #1d1d1f;
            letter-spacing: -0.02em;
        }
        
        .dark .section-title {
            color: #f5f5f7;
        }
        
        .chapter-section {
            margin-bottom: 48px;
        }
        
        .chapter-title {
            font-size: 20px;
            font-weight: 600;
            margin-bottom: 20px;
            color: #1d1d1f;
            letter-spacing: -0.01em;
        }
        
        .dark .chapter-title {
            color: #f5f5f7;
        }
        
        .videos-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }
        
        .video-card {
            background: rgba(255, 255, 255, 0.7);
            backdrop-filter: blur(20px);
            border-radius: 16px;
            overflow: hidden;
            border: 0.5px solid rgba(0, 0, 0, 0.04);
            transition: all 0.2s ease;
        }
        
        .dark .video-card {
            background: rgba(28, 28, 30, 0.7);
            border: 0.5px solid rgba(255, 255, 255, 0.1);
        }
        
        .video-card:hover {
            transform: translateY(-2px);
            border-color: rgba(0, 122, 255, 0.2);
        }
        
        .video-thumbnail {
            position: relative;
            width: 100%;
            height: 160px;
            background: linear-gradient(135deg, #007aff 0%, #5856d6 100%);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
        }
        
        .video-thumbnail img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .video-placeholder {
            text-align: center;
        }
        
        .video-placeholder-icon {
            font-size: 32px;
            margin-bottom: 4px;
            opacity: 0.9;
        }
        
        .video-placeholder-text {
            font-size: 13px;
            font-weight: 500;
            opacity: 0.8;
        }
        
        .video-badges {
            position: absolute;
            top: 12px;
            left: 12px;
            right: 12px;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
        }
        
        .lesson-badge {
            background: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(10px);
            color: white;
            padding: 4px 8px;
            border-radius: 6px;
            font-size: 11px;
            font-weight: 500;
        }
        
        .watched-badge {
            background: #30d158;
            color: white;
            padding: 4px 8px;
            border-radius: 6px;
            font-size: 11px;
            font-weight: 600;
        }
        
        .video-content {
            padding: 20px;
        }
        
        .video-title {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 16px;
            color: #1d1d1f;
            display: flex;
            align-items: center;
            gap: 6px;
            line-height: 1.3;
        }
        
        .dark .video-title {
            color: #f5f5f7;
        }
        
        .btn-watch {
            width: 100%;
            background: #007aff;
            color: white;
            justify-content: center;
        }
        
        .btn-watch:hover {
            background: #0051d5;
        }
        
        .btn-locked {
            width: 100%;
            background: #8e8e93;
            color: white;
            justify-content: center;
            cursor: not-allowed;
            opacity: 0.6;
        }
        
        .btn-locked:hover {
            transform: none;
        }
        
        .btn-pdf {
            width: 100%;
            background: #ff3b30;
            color: white;
            justify-content: center;
        }
        
        .btn-pdf:hover {
            background: #d70015;
        }
        
        .error-state {
            text-align: center;
            padding: 60px 20px;
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            border: 0.5px solid rgba(0, 0, 0, 0.04);
        }
        
        .dark .error-state {
            background: rgba(28, 28, 30, 0.8);
            border: 0.5px solid rgba(255, 255, 255, 0.1);
        }
        
        .error-icon {
            font-size: 48px;
            margin-bottom: 16px;
            opacity: 0.8;
        }
        
        .error-title {
            font-size: 22px;
            font-weight: 600;
            margin-bottom: 8px;
            color: #1d1d1f;
        }
        
        .dark .error-title {
            color: #f5f5f7;
        }
        
        .error-message {
            color: #6e6e73;
            font-size: 15px;
        }
        
        .theme-toggle {
            position: fixed;
            top: 20px;
            right: 20px;
            width: 40px;
            height: 40px;
            border: none;
            border-radius: 20px;
            background: rgba(255, 255, 255, 0.8);
            backdrop-filter: blur(20px);
            border: 0.5px solid rgba(0, 0, 0, 0.04);
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 18px;
            transition: all 0.15s ease;
            z-index: 1000;
        }
        
        .dark .theme-toggle {
            background: rgba(28, 28, 30, 0.8);
            border: 0.5px solid rgba(255, 255, 255, 0.1);
        }
        
        .theme-toggle:hover {
            transform: scale(1.05);
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 40px 20px;
            }
            
            .course-title {
                font-size: 36px;
            }
            
            .videos-grid {
                grid-template-columns: 1fr;
                gap: 16px;
            }
            
            .video-content {
                padding: 16px;
            }
        }
    </style>
</head>
<body>
    <button class="theme-toggle" id="themeToggle">🌙</button>
    
    <div class="container">
        <div class="course-header">
            <h1 class="course-title"><%= courseName %></h1>
            <p class="course-subtitle">Master new skills with comprehensive lessons</p>
            
            <div class="course-actions">
                <button id="enrollBtn" class="btn btn-primary">
                    Enroll in Course
                </button>
            </div>
        </div>
        
        <% if (typeof watchedVideos !== 'undefined' && typeof totalVideos !== 'undefined') { %>
        <div class="progress-card">
            <div class="progress-header">
                <span class="progress-title">Course Progress</span>
                <span class="progress-stats"><%= watchedVideos %>/<%= totalVideos %> videos (<%= Math.round((watchedVideos / totalVideos) * 100) %>%)</span>
            </div>
            <div class="progress-bar">
                <div class="progress-fill" style="width: <%= typeof watchedPercent !== 'undefined' ? watchedPercent : Math.round((watchedVideos / totalVideos) * 100) %>%"></div>
            </div>
        </div>
        <% } %>

        <% if (typeof error !== 'undefined') { %>
        <div class="error-state">
            <div class="error-icon">⚠️</div>
            <h2 class="error-title">Course Error</h2>
            <p class="error-message"><%= error %></p>
        </div>
        <% } else if (videos.length === 0) { %>
        <div class="error-state">
            <div class="error-icon">📹</div>
            <h2 class="error-title">No Videos Found</h2>
            <p class="error-message">No videos found for this course.</p>
        </div>
        <% } else { %>
        
        <div class="videos-section">
            <h2 class="section-title">Course Videos</h2>
            
            <% 
            // Remove duplicates and sort videos
            const uniqueVideos = [];
            const seenIds = new Set();
            
            videos.forEach(video => {
                if (video && video._id && !seenIds.has(video._id.toString())) {
                    seenIds.add(video._id.toString());
                    uniqueVideos.push(video);
                }
            });

            // Group by chapter and sort
            const videosByChapter = {};
            uniqueVideos.forEach(video => {
                const chapter = video.chapter || 'Uncategorized';
                if (!videosByChapter[chapter]) {
                    videosByChapter[chapter] = [];
                }
                videosByChapter[chapter].push(video);
            });

            Object.keys(videosByChapter).forEach(chapter => {
                videosByChapter[chapter].sort((a, b) => {
                    const aTitle = a.title.toLowerCase();
                    const bTitle = b.title.toLowerCase();
                    
                    const aMatch = aTitle.match(/(lesson|video|part|chapter)\s*(\d+)|^(\d+)/);
                    const bMatch = bTitle.match(/(lesson|video|part|chapter)\s*(\d+)|^(\d+)/);
                    
                    const aNum = aMatch ? parseInt(aMatch[2] || aMatch[3], 10) : 0;
                    const bNum = bMatch ? parseInt(bMatch[2] || bMatch[3], 10) : 0;
                    
                    if (aNum && bNum && aNum !== bNum) {
                        return aNum - bNum;
                    }
                    
                    if (aNum && !bNum) return -1;
                    if (!aNum && bNum) return 1;
                    
                    return a.title.localeCompare(b.title);
                });
            });

            const sortedChapters = Object.keys(videosByChapter).sort((a, b) => {
                const aLower = a.toLowerCase();
                const bLower = b.toLowerCase();
                
                const aMatch = aLower.match(/(chapter|section|part)\s*(\d+)|^(\d+)/);
                const bMatch = bLower.match(/(chapter|section|part)\s*(\d+)|^(\d+)/);
                
                const aNum = aMatch ? parseInt(aMatch[2] || aMatch[3], 10) : 0;
                const bNum = bMatch ? parseInt(bMatch[2] || bMatch[3], 10) : 0;
                
                if (aNum && bNum && aNum !== bNum) {
                    return aNum - bNum;
                }
                
                if (aNum && !bNum) return -1;
                if (!aNum && bNum) return 1;
                
                return a.localeCompare(b);
            });

            let videoIndex = 0;
            sortedChapters.forEach(chapter => {
            %>
            <div class="chapter-section">
                <h3 class="chapter-title"><%= chapter %></h3>
                <div class="videos-grid">
                    <% videosByChapter[chapter].forEach(video => { 
                        videoIndex++;
                    %>
                    <div class="video-card">
                        <div class="video-thumbnail">
                            <% if (video.thumbnailUrl) { %>
                            <img src="<%= video.thumbnailUrl %>" alt="<%= video.title %>"
                                 onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                            <% } %>
                            <div class="video-placeholder" <%= video.thumbnailUrl ? 'style="display: none;"' : '' %>>
                                <div class="video-placeholder-icon">▶️</div>
                                <div class="video-placeholder-text">Video Lesson</div>
                            </div>
                            
                            <div class="video-badges">
                                <span class="lesson-badge">Lesson <%= videoIndex %></span>
                                <% if (video.watched) { %>
                                <span class="watched-badge">✓</span>
                                <% } %>
                            </div>
                        </div>
                        
                        <div class="video-content">
                            <h4 class="video-title">
                                <%= video.title %>
                                <% if (video.watched) { %>
                                <span style="color: #30d158;">✓</span>
                                <% } %>
                            </h4>
                            
                            <div class="watch-button" id="watchBtn-<%= video._id %>" data-video-id="<%= video._id %>" data-course="<%= courseName %>">
                                <% if (video.videoUrl && video.videoUrl.endsWith('.pdf')) { %>
                                <a href="/pdf/<%= courseName %>/<%= encodeURIComponent(video.basename) %>" target="_blank"
                                   class="btn btn-pdf">
                                    📄 View PDF
                                </a>
                                <% } else { %>
                                <button class="btn btn-locked">
                                    🔒 Enroll to Watch
                                </button>
                                <% } %>
                            </div>
                        </div>
                    </div>
                    <% }); %>
                </div>
            </div>
            <% }); %>
        </div>
        <% } %>
    </div>

    <script>
        // Theme management
        function initTheme() {
            const theme = localStorage.getItem('theme') || 'light';
            document.documentElement.classList.toggle('dark', theme === 'dark');
            document.getElementById('themeToggle').textContent = theme === 'dark' ? '☀️' : '🌙';
        }
        
        function toggleTheme() {
            const isDark = document.documentElement.classList.contains('dark');
            const newTheme = isDark ? 'light' : 'dark';
            document.documentElement.classList.toggle('dark', newTheme === 'dark');
            localStorage.setItem('theme', newTheme);
            document.getElementById('themeToggle').textContent = newTheme === 'dark' ? '☀️' : '🌙';
        }
        
        initTheme();
        document.getElementById('themeToggle').addEventListener('click', toggleTheme);

        let isEnrolled = false;
        let isAdmin = false;

        document.addEventListener('DOMContentLoaded', () => {
            checkEnrollmentStatus();
            checkUserRole();
        });

        async function checkUserRole() {
            const user = JSON.parse(localStorage.getItem('user') || '{}');
            isAdmin = user.email === 'engineerfelex@gmail.com';
            updateWatchButtons();
        }

        async function checkEnrollmentStatus() {
            try {
                const token = localStorage.getItem('accessToken');
                const courseName = '<%= courseName %>';
                
                const response = await fetch(`/api/enrollments/check/${encodeURIComponent(courseName)}`, {
                    headers: { 'Authorization': `Bearer ${token}` }
                });
                
                const data = await response.json();
                if (data.success && data.data.enrolled) {
                    isEnrolled = true;
                    const enrollBtn = document.getElementById('enrollBtn');
                    enrollBtn.textContent = 'Enrolled ✓';
                    enrollBtn.style.background = '#30d158';
                    enrollBtn.disabled = true;
                    enrollBtn.style.display = 'none';
                }
                
                updateWatchButtons();
            } catch (error) {
                console.error('Error checking enrollment:', error);
            }
        }

        function updateWatchButtons() {
            const watchButtons = document.querySelectorAll('.watch-button');
            
            watchButtons.forEach(btn => {
                const videoId = btn.dataset.videoId;
                const courseName = btn.dataset.course;
                
                if (isAdmin || isEnrolled) {
                    const button = btn.querySelector('button');
                    if (button && button.classList.contains('btn-locked')) {
                        btn.innerHTML = `
                            <a href="/videos/${encodeURIComponent(courseName)}/${videoId}"
                               class="btn btn-watch">
                                ▶️ Watch Video
                            </a>
                        `;
                    }
                }
            });
        }

        document.getElementById('enrollBtn').addEventListener('click', async () => {
            if (isEnrolled) return;
            
            try {
                const token = localStorage.getItem('accessToken');
                const courseName = '<%= courseName %>';
                
                const response = await fetch('/api/enrollments', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ courseId: courseName })
                });
                
                const data = await response.json();
                if (data.success) {
                    isEnrolled = true;
                    const enrollBtn = document.getElementById('enrollBtn');
                    enrollBtn.textContent = 'Enrolled ✓';
                    enrollBtn.style.background = '#30d158';
                    enrollBtn.disabled = true;
                    enrollBtn.style.display = 'none';
                    updateWatchButtons();
                } else {
                    alert('Failed to enroll: ' + data.error);
                }
            } catch (error) {
                alert('Error enrolling: ' + error.message);
            }
        });
    </script>
</body>
</html>