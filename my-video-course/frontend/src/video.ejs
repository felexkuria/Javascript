<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= video ? video.title : 'Video' %> - <%= courseName %></title>
    <%- include('partials/interactive-styles') %>
    <%- include('partials/video-styles') %>
    <%- include('partials/chatbot-styles') %>
    <style>
        .main-content {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 40px;
            align-items: start;
        }
        
        .corner-badges {
            position: fixed;
            top: 80px;
            left: 20px;
            display: flex;
            flex-direction: column;
            gap: 12px;
            z-index: 1000;
        }
        
        .corner-badge {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(20px);
            border-radius: 12px;
            padding: 12px;
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1);
            border: 0.5px solid rgba(0, 0, 0, 0.04);
            min-width: 200px;
            transition: all 0.2s ease;
        }
        
        .dark .corner-badge {
            background: rgba(28, 28, 30, 0.9);
            border: 0.5px solid rgba(255, 255, 255, 0.1);
        }
        
        .corner-badge:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
        }
        
        .badge-content {
            display: flex;
            align-items: center;
            gap: 12px;
        }
        
        .badge-icon {
            font-size: 20px;
        }
        
        .badge-stats {
            flex: 1;
        }
        
        .stat-row {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 4px;
        }
        
        .stat-row:last-child {
            margin-bottom: 0;
        }
        
        .stat-row .stat-label {
            font-size: 11px;
            color: #86868b;
            font-weight: 500;
        }
        
        .stat-row .stat-value {
            font-size: 14px;
            font-weight: 600;
            color: #1d1d1f;
        }
        
        .dark .stat-row .stat-value {
            color: #f5f5f7;
        }
        
        .shortcuts-mini {
            flex: 1;
        }
        
        .shortcut-row {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 4px;
            font-size: 11px;
        }
        
        .shortcut-row:last-child {
            margin-bottom: 0;
        }
        
        .shortcut-row span {
            background: #f2f2f7;
            color: #1d1d1f;
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 'SF Mono', Monaco, monospace;
            font-weight: 500;
            min-width: 16px;
            text-align: center;
        }
        
        .dark .shortcut-row span {
            background: #2c2c2e;
            color: #f5f5f7;
        }
        
        .chapters-sidebar {
            max-height: calc(100vh - 120px);
            overflow-y: auto;
        }
        
        @media (max-width: 1024px) {
            .main-content {
                grid-template-columns: 1fr;
                gap: 24px;
            }
            
            .corner-badges {
                position: relative;
                top: auto;
                left: auto;
                flex-direction: row;
                justify-content: center;
                margin: 20px 0;
            }
            
            .corner-badge {
                min-width: auto;
                flex: 1;
            }
        }
    </style>
</head>
<body>
    <button class="theme-toggle" id="themeToggle">üåô</button>
    
    <div class="container">
        <%- include('partials/video-header', { video, courseName }) %>

        <% if (video) { %>
        <div class="main-content">
            <div class="video-main">
                <%- include('partials/video-player', { video, courseName, isYouTube }) %>
                <%- include('partials/video-controls', { video, courseName, isFirstVideo, isLastVideo, watchedVideos, totalVideos, watchedPercent }) %>
            </div>
            
            <!-- Chapters Sidebar -->
            <% if (typeof chapters !== 'undefined' && chapters.length > 0) { %>
            <div class="chapters-sidebar">
                <div class="sidebar-card">
                    <h3 class="sidebar-title">üìö Chapters</h3>
                    <div class="chapter-list">
                        <% chapters.sort((a, b) => {
                            const aMatch = a.match(/(\d+)/);
                            const bMatch = b.match(/(\d+)/);
                            if (!aMatch || !bMatch) return a.localeCompare(b);
                            return parseInt(aMatch[0], 10) - parseInt(bMatch[0], 10);
                        }).forEach(chapter => {
                            const chapterVideos = videosByChapter[chapter];
                        %>
                        <div class="chapter-item interactive-chapter">
                            <strong><%= chapter %></strong>
                            <% chapterVideos.forEach((chapterVideo, index) => { %>
                            <div style="margin-left: 12px; margin-top: 4px;">
                                <a href="/videos/<%= encodeURIComponent(courseName) %>/<%= chapterVideo._id %>" 
                                   class="chapter-link interactive-link <%= chapterVideo._id.toString() === video._id.toString() ? 'active' : '' %>">
                                    <%= (index + 1) %>. <%= chapterVideo.title %>
                                    <% if (chapterVideo.watched) { %> ‚úì<% } %>
                                </a>
                            </div>
                            <% }); %>
                        </div>
                        <% }); %>
                    </div>
                </div>
            </div>
            <% } %>
        </div>
        
        <!-- Corner Badges -->
        <div class="corner-badges">
            <!-- Progress Badge -->
            <div class="corner-badge progress-badge">
                <div class="badge-content">
                    <span class="badge-icon">üìä</span>
                    <div class="badge-stats">
                        <div class="stat-row">
                            <span class="stat-label">Level</span>
                            <span class="stat-value user-level">1</span>
                        </div>
                        <div class="stat-row">
                            <span class="stat-label">Points</span>
                            <span class="stat-value user-points">0</span>
                        </div>
                        <div class="stat-row">
                            <span class="stat-label">Streak</span>
                            <span class="stat-value user-streak">0üî•</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Shortcuts Badge -->
            <div class="corner-badge shortcuts-badge">
                <div class="badge-content">
                    <span class="badge-icon">‚å®Ô∏è</span>
                    <div class="shortcuts-mini">
                        <div class="shortcut-row"><span>F</span>Fullscreen</div>
                        <div class="shortcut-row"><span>K</span>Play/Pause</div>
                        <div class="shortcut-row"><span>J</span>-10s</div>
                        <div class="shortcut-row"><span>L</span>+10s</div>
                    </div>
                </div>
            </div>
        </div>
        <% } else { %>
        <div class="error-state">
            <div class="error-icon">‚ö†Ô∏è</div>
            <h2 class="error-title">Video Not Found</h2>
            <p class="error-message">The requested video could not be loaded.</p>
            <a href="/course/<%= courseName %>" class="btn btn-primary">
                <span>‚Üê</span> Back to Course
            </a>
        </div>
        <% } %>
    </div>

    <div id="keyHint" class="key-hint"></div>
    
    <%- include('partials/achievement-popup') %>
    <%- include('partials/floating-chatbot') %>

    <link rel="stylesheet" href="/css/quiz-system.css">
    <script src="/js/confetti.min.js"></script>
    <script src="/js/gamification.js"></script>
    <script src="/js/quiz-system.js"></script>
    <%- include('partials/video-scripts', { video, courseName, isLastVideo, isLastInChapter }) %>
    <script>
        function initTheme() {
            const theme = localStorage.getItem('theme') || 'light';
            document.documentElement.classList.toggle('dark', theme === 'dark');
            document.getElementById('themeToggle').textContent = theme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
        }
        
        function toggleTheme() {
            const isDark = document.documentElement.classList.contains('dark');
            const newTheme = isDark ? 'light' : 'dark';
            document.documentElement.classList.toggle('dark', newTheme === 'dark');
            localStorage.setItem('theme', newTheme);
            document.getElementById('themeToggle').textContent = newTheme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
        }
        
        initTheme();
        document.getElementById('themeToggle').addEventListener('click', toggleTheme);

        document.addEventListener('DOMContentLoaded', function() {
            const videoPlayer = document.getElementById('videoPlayer');
            const markWatchedButton = document.getElementById('markWatchedButton');
            const prevButton = document.getElementById('prevButton');
            const nextButton = document.getElementById('nextButton');
            const keyHint = document.getElementById('keyHint');
            
            let courseName = '<%= courseName %>';
            let videoId = '<%= video ? video._id : "" %>';
            
            function showKeyHint(text) {
                if (keyHint) {
                    keyHint.textContent = text;
                    keyHint.classList.add('visible');
                    setTimeout(() => keyHint.classList.remove('visible'), 1000);
                }
            }

            function markVideoAsWatched() {
                fetch('/api/mark-watched', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ videoId, courseName })
                })
                .then(response => response.json())
                .then(data => {
                    const badge = document.querySelector('.status-badge');
                    if (badge) {
                        badge.className = 'status-badge status-watched';
                        badge.innerHTML = '‚úì Watched';
                    }
                    
                    updateVideoCount();
                    
                    if (window.gamificationSystem) {
                        window.gamificationSystem.onVideoCompleted({
                            videoId, courseName,
                            isLastVideo: <%= isLastVideo ? 'true' : 'false' %>,
                            isLastInChapter: <%= isLastInChapter ? 'true' : 'false' %>
                        });
                    }
                })
                .catch(error => console.error('Error:', error));
            }

            // Event listeners
            if (markWatchedButton) {
                markWatchedButton.addEventListener('click', (e) => {
                    e.preventDefault();
                    console.log('Mark watched button clicked');
                    markVideoAsWatched();
                });
            } else {
                console.log('Mark watched button not found');
            }
            
            if (prevButton) {
                prevButton.addEventListener('click', async (e) => {
                    e.preventDefault();
                    console.log('Previous button clicked');
                    try {
                        const response = await fetch(`/api/next-video?currentVideoId=${videoId}&courseName=${encodeURIComponent(courseName)}&direction=prev`);
                        if (response.ok) {
                            const prevVideo = await response.json();
                            console.log('Previous video:', prevVideo);
                            window.location.href = `/videos/${encodeURIComponent(courseName)}/${prevVideo._id}`;
                        } else {
                            console.error('No previous video found');
                        }
                    } catch (error) {
                        console.error('Error getting previous video:', error);
                    }
                });
            } else {
                console.log('Previous button not found');
            }
            
            if (nextButton) {
                nextButton.addEventListener('click', async () => {
                    try {
                        const response = await fetch(`/api/next-video?currentVideoId=${videoId}&courseName=${encodeURIComponent(courseName)}&direction=next`);
                        if (response.ok) {
                            const nextVideo = await response.json();
                            window.location.href = `/videos/${encodeURIComponent(courseName)}/${nextVideo._id}?autoplay=true`;
                        }
                    } catch (error) {
                        console.error('Error getting next video:', error);
                    }
                });
            }

            // Keyboard shortcuts
            document.addEventListener('keydown', function(e) {
                if (!videoPlayer || document.activeElement.tagName === 'INPUT' || document.activeElement.tagName === 'TEXTAREA') return;

                const key = e.key.toLowerCase();
                
                switch(key) {
                    case 'f':
                        e.preventDefault();
                        if (document.fullscreenElement) {
                            document.exitFullscreen();
                            showKeyHint('Exit Fullscreen');
                        } else {
                            videoPlayer.requestFullscreen();
                            showKeyHint('Fullscreen');
                        }
                        break;
                    case 'j':
                        e.preventDefault();
                        if (videoPlayer.currentTime) {
                            videoPlayer.currentTime = Math.max(0, videoPlayer.currentTime - 10);
                            showKeyHint('‚è™ -10s');
                        }
                        break;
                    case 'k':
                    case ' ':
                        e.preventDefault();
                        if (videoPlayer.paused) {
                            videoPlayer.play();
                            showKeyHint('‚ñ∂Ô∏è Play');
                        } else {
                            videoPlayer.pause();
                            showKeyHint('‚è∏Ô∏è Pause');
                        }
                        break;
                    case 'l':
                        e.preventDefault();
                        if (videoPlayer.duration) {
                            videoPlayer.currentTime = Math.min(videoPlayer.duration, videoPlayer.currentTime + 10);
                            showKeyHint('‚è© +10s');
                        }
                        break;
                }
            });

            // Video event listeners
            if (videoPlayer) {
                videoPlayer.addEventListener('ended', markVideoAsWatched);
                
                let watchedMarked = false;
                videoPlayer.addEventListener('timeupdate', function() {
                    if (!videoPlayer.duration) return;
                    const watchPercent = (videoPlayer.currentTime / videoPlayer.duration) * 100;
                    
                    if (watchPercent >= 90 && !watchedMarked) {
                        markVideoAsWatched();
                        watchedMarked = true;
                    }
                });
            }

            // Floating Chatbot Functions
            window.showFloatingChatbot = function() {
                const chatbot = document.getElementById('floating-chatbot');
                const trigger = document.getElementById('chatbot-trigger');
                
                if (chatbot) {
                    chatbot.style.display = 'flex';
                }
                if (trigger) {
                    trigger.style.display = 'none';
                }
                
                setTimeout(() => {
                    const input = document.getElementById('floating-chat-input');
                    if (input) input.focus();
                }, 300);
            };
            
            window.toggleFloatingChatbot = function() {
                const chatbot = document.getElementById('floating-chatbot');
                const trigger = document.getElementById('chatbot-trigger');
                
                if (chatbot) {
                    chatbot.style.display = 'none';
                }
                if (trigger) {
                    trigger.style.display = 'flex';
                }
            };

            window.sendFloatingChatMessage = async function() {
                const input = document.getElementById('floating-chat-input');
                const messages = document.getElementById('floating-chat-messages');
                
                if (!input || !messages) return;
                
                const message = input.value.trim();
                if (!message) return;
                
                const time = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
                messages.innerHTML += `
                    <div class="chat-message user">
                        <div class="message-content">${message}</div>
                        <div class="message-meta">You ‚Ä¢ ${time}</div>
                    </div>
                `;
                
                input.value = '';
                messages.scrollTop = messages.scrollHeight;
                
                try {
                    const response = await fetch('/api/ai/chat', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ 
                            message, 
                            aiModel: 'nova-pro',
                            context: {
                                videoTitle: '<%= video ? video.title : "" %>',
                                courseName: courseName,
                                videoId: videoId
                            }
                        })
                    });
                    
                    const data = await response.json();
                    const botTime = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
                    
                    if (data.success) {
                        messages.innerHTML += `
                            <div class="chat-message bot">
                                <div class="message-content">${data.response}</div>
                                <div class="message-meta">AI ‚Ä¢ ${botTime}</div>
                            </div>
                        `;
                    } else {
                        messages.innerHTML += `
                            <div class="chat-message bot">
                                <div class="message-content">Sorry, I couldn't process that.</div>
                                <div class="message-meta">System ‚Ä¢ ${botTime}</div>
                            </div>
                        `;
                    }
                } catch (error) {
                    const botTime = new Date().toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
                    messages.innerHTML += `
                        <div class="chat-message bot">
                            <div class="message-content">Connection error. Please try again.</div>
                            <div class="message-meta">System ‚Ä¢ ${botTime}</div>
                        </div>
                    `;
                }
                
                messages.scrollTop = messages.scrollHeight;
            };

            // Enter key for chat
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Enter' && document.activeElement && document.activeElement.id === 'floating-chat-input') {
                    e.preventDefault();
                    sendFloatingChatMessage();
                }
            });

            // Quiz function
            window.startVideoQuiz = async function() {
                try {
                    const response = await fetch(`/api/quizzes/${videoId}`);
                    const data = await response.json();
                    
                    if (data.success && data.quiz && window.quizSystem) {
                        window.quizSystem.startQuiz('video-specific', data.quiz);
                    } else if (window.quizSystem) {
                        window.quizSystem.startQuiz('terraform');
                    }
                } catch (error) {
                    console.error('Error loading quiz:', error);
                }
            };

            // SRT Generation
            const generateSRTButton = document.getElementById('generateSRTButton');
            if (generateSRTButton) {
                generateSRTButton.addEventListener('click', async function(e) {
                    e.preventDefault();
                    console.log('Generate SRT button clicked');
                    this.disabled = true;
                    this.innerHTML = '<span>‚è≥</span> Generating...';
                    
                    try {
                        const response = await fetch('/api/generate-srt', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                videoTitle: '<%= video ? video.title : "" %>',
                                courseName,
                                videoId
                            })
                        });
                        
                        const data = await response.json();
                        if (data.status === 'processing') {
                            this.innerHTML = '<span>üîÑ</span> Processing...';
                        } else {
                            this.innerHTML = '<span>‚úÖ</span> Ready';
                            this.disabled = false;
                        }
                    } catch (error) {
                        console.error('SRT generation failed:', error);
                        this.innerHTML = '<span>‚ùå</span> Failed';
                        this.disabled = false;
                    }
                });
            } else {
                console.log('Generate SRT button not found');
            }

            // Fetch and update video count
            async function updateVideoCount() {
                try {
                    const response = await fetch(`/api/videos/course/${encodeURIComponent(courseName)}/count`);
                    const data = await response.json();
                    
                    if (data.success) {
                        const progressText = document.getElementById('videoProgress');
                        if (progressText) {
                            progressText.textContent = `${data.data.watched}/${data.data.total} videos`;
                        }
                        
                        const progressFill = document.querySelector('.progress-fill');
                        if (progressFill && data.data.total > 0) {
                            const percentage = Math.round((data.data.watched / data.data.total) * 100);
                            progressFill.style.width = `${percentage}%`;
                        }
                    }
                } catch (error) {
                    console.error('Error fetching video count:', error);
                }
            }
            
            // Update count on page load
            updateVideoCount();
        });
    </script>
</body>
</html>