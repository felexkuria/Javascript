name: Deploy to AWS

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: video-course-app

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Create ECR repository if it doesn't exist
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build for linux/amd64 platform
        docker buildx create --use --name multiarch || true
        docker buildx build --platform linux/amd64 \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          --push ./my-video-course
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      working-directory: ./my-video-course/terraform
      run: terraform init

    - name: Import Existing Resources
      working-directory: ./my-video-course/terraform
      continue-on-error: true
      env:
        TF_VAR_mongodb_uri: ${{ secrets.MONGODB_URI }}
        TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
        TF_VAR_nova_api_key: ${{ secrets.NOVA_API_KEY }}
        TF_VAR_key_pair_name: "video-course-key"
      run: |
        terraform import aws_iam_role.cognito_authenticated video-course-app-cognito-authenticated || true
        terraform import aws_iam_role.ec2_role video-course-app-ec2-role || true
        terraform import aws_ecr_repository.main video-course-app || true
        ALB_ARN=$(aws elbv2 describe-load-balancers --names video-course-app-alb --query 'LoadBalancers[0].LoadBalancerArn' --output text 2>/dev/null)
        if [ "$ALB_ARN" != "None" ]; then terraform import aws_lb.main $ALB_ARN || true; fi
        TG_ARN=$(aws elbv2 describe-target-groups --names video-course-app-tg --query 'TargetGroups[0].TargetGroupArn' --output text 2>/dev/null)
        if [ "$TG_ARN" != "None" ]; then terraform import aws_lb_target_group.app $TG_ARN || true; fi

    - name: Terraform Apply - Base Resources
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      working-directory: ./my-video-course/terraform
      env:
        TF_VAR_mongodb_uri: ${{ secrets.MONGODB_URI }}
        TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
        TF_VAR_nova_api_key: ${{ secrets.NOVA_API_KEY }}
        TF_VAR_key_pair_name: "video-course-key"
      run: |
        terraform apply -auto-approve -target=aws_vpc.main -target=aws_subnet.public -target=aws_acm_certificate.main
        
    - name: Terraform Apply - Complete
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      working-directory: ./my-video-course/terraform
      env:
        TF_VAR_mongodb_uri: ${{ secrets.MONGODB_URI }}
        TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_gemini_api_key: ${{ secrets.GEMINI_API_KEY }}
        TF_VAR_nova_api_key: ${{ secrets.NOVA_API_KEY }}
        TF_VAR_key_pair_name: "video-course-key"
      run: terraform apply -auto-approve

    - name: Trigger Instance Refresh
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        ASG_NAME=$(cd my-video-course/terraform && terraform output -raw autoscaling_group_name)
        aws autoscaling start-instance-refresh --auto-scaling-group-name $ASG_NAME

    - name: Deployment Complete
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        echo "üöÄ Deployment completed successfully!"
        echo "üì± Your app is live at: https://skool.shopmultitouch.com"
        echo "‚è±Ô∏è  Allow 5-10 minutes for instance refresh to complete"